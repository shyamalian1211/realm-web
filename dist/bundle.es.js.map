{"version":3,"file":"bundle.es.js","sources":["../src/environment.ts","../src/storage/PrefixedStorage.ts","../src/storage/MemoryStorage.ts","../../fetch/dist/node-esm/node.js","../../../node_modules/js-base64/base64.mjs","../src/utils/ejson.ts","../src/UserProfile.ts","../src/UserStorage.ts","../src/utils/objects.ts","../src/utils/string.ts","../src/FunctionsFactory.ts","../src/auth-providers/EmailPasswordAuth.ts","../src/routes.ts","../src/auth-providers/ApiKeyAuth.ts","../src/services/MongoDBService/WatchError.ts","../src/services/MongoDBService/WatchStream.ts","../src/services/MongoDBService/MongoDBCollection.ts","../src/services/MongoDBService/index.ts","../src/User.ts","../src/Credentials.ts","../src/AppStorage.ts","../src/OAuth2Helper.ts","../src/Authenticator.ts","../src/MongoDBRealmError.ts","../src/Fetcher.ts","../src/DeviceInformation.ts","../src/App.ts","../src/index.ts","../src/node/index.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { Storage } from \"./storage\";\r\nimport { Window } from \"./OAuth2Helper\";\r\n\r\n/**\r\n * Helps decode buffers into strings of various encodings.\r\n */\r\ndeclare class TextDecoder {\r\n  decode(buffer: Uint8Array, options?: { stream: boolean }): string;\r\n}\r\n\r\n/** An object with values specific to the runtime environment. */\r\nexport type Environment = {\r\n  /**\r\n   * The default storage instance on the environment.\r\n   */\r\n  defaultStorage: Storage;\r\n\r\n  /**\r\n   * Open a browser window.\r\n   */\r\n  openWindow: (url: string) => Window | null;\r\n\r\n  /**\r\n   * The name of the executing platform.\r\n   */\r\n  platform: string;\r\n\r\n  /**\r\n   * The version of the executing platform.\r\n   */\r\n  platformVersion: string;\r\n\r\n  /**\r\n   * Helps decode buffers into strings of various encodings.\r\n   */\r\n  TextDecoder: typeof TextDecoder;\r\n};\r\n\r\nlet environment: Environment | null = null;\r\n\r\n/**\r\n * Set the environment of execution.\r\n * Note: This should be called as the first thing before executing any code which calls getEnvironment()\r\n * @param e An object containing environment specific implementations.\r\n */\r\nexport function setEnvironment(e: Environment): void {\r\n  environment = e;\r\n}\r\n\r\n/**\r\n * Get the environment of execution.\r\n * @returns An object containing environment specific implementations.\r\n */\r\nexport function getEnvironment(): Environment {\r\n  if (environment) {\r\n    return environment;\r\n  } else {\r\n    throw new Error(\"Cannot get environment before it's set\");\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { Storage, StorageChangeListener } from \"./Storage\";\r\n\r\n/**\r\n * A `Storage` which will prefix a key part to every operation.\r\n */\r\nexport class PrefixedStorage implements Storage {\r\n  /**\r\n   * The string separating two parts.\r\n   */\r\n  private static PART_SEPARATOR = \":\";\r\n\r\n  /**\r\n   * The underlying storage to use for operations.\r\n   */\r\n  private storage: Storage;\r\n\r\n  /**\r\n   * The part of the key to prefix when performing operations.\r\n   */\r\n  private keyPart: string;\r\n\r\n  /**\r\n   * Construct a `Storage` which will prefix a key part to every operation.\r\n   * @param storage The underlying storage to use for operations.\r\n   * @param keyPart The part of the key to prefix when performing operations.\r\n   */\r\n  constructor(storage: Storage, keyPart: string) {\r\n    this.storage = storage;\r\n    this.keyPart = keyPart;\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public get(key: string): string | null {\r\n    return this.storage.get(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public set(key: string, value: string): void {\r\n    return this.storage.set(this.keyPart + PrefixedStorage.PART_SEPARATOR + key, value);\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public remove(key: string): void {\r\n    return this.storage.remove(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public prefix(keyPart: string): Storage {\r\n    return new PrefixedStorage(this, keyPart);\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public clear(prefix = \"\"): void {\r\n    return this.storage.clear(this.keyPart + PrefixedStorage.PART_SEPARATOR + prefix);\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public addListener(listener: StorageChangeListener): void {\r\n    return this.storage.addListener(listener);\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public removeListener(listener: StorageChangeListener): void {\r\n    return this.storage.addListener(listener);\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { Storage, StorageChangeListener } from \"./Storage\";\r\nimport { PrefixedStorage } from \"./PrefixedStorage\";\r\n\r\n/**\r\n * In-memory storage that will not be persisted.\r\n */\r\nexport class MemoryStorage implements Storage {\r\n  /**\r\n   * Internal state of the storage.\r\n   */\r\n  private readonly storage: { [key: string]: string } = {};\r\n\r\n  /**\r\n   * A set of listners.\r\n   */\r\n  private readonly listeners: Set<StorageChangeListener> = new Set();\r\n\r\n  /** @inheritdoc */\r\n  public get(key: string): string | null {\r\n    if (key in this.storage) {\r\n      return this.storage[key];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public set(key: string, value: string): void {\r\n    this.storage[key] = value;\r\n    // Fire the listeners\r\n    this.fireListeners();\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public remove(key: string): void {\r\n    delete this.storage[key];\r\n    // Fire the listeners\r\n    this.fireListeners();\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public prefix(keyPart: string): Storage {\r\n    return new PrefixedStorage(this, keyPart);\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public clear(prefix?: string): void {\r\n    // Iterate all keys and delete their values if they have a matching prefix\r\n    for (const key of Object.keys(this.storage)) {\r\n      if (!prefix || key.startsWith(prefix)) {\r\n        delete this.storage[key];\r\n      }\r\n    }\r\n    // Fire the listeners\r\n    this.fireListeners();\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public addListener(listener: StorageChangeListener): void {\r\n    this.listeners.add(listener);\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public removeListener(listener: StorageChangeListener): void {\r\n    this.listeners.delete(listener);\r\n  }\r\n\r\n  /**\r\n   * Tell the listeners that a change occurred.\r\n   */\r\n  private fireListeners() {\r\n    this.listeners.forEach((listener) => listener());\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2024 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// The sole purpose of this line is to verify types\nconst TypeTest = {};\nTypeTest;\n// To ensure users cannot pass a request body that the platform cannot handle\nTypeTest;\nexport const Headers = globalThis.Headers;\nexport const AbortSignal = globalThis.AbortSignal;\nexport const AbortController = globalThis.AbortController;\n// Binding the function to avoid \"Failed to execute 'fetch' on 'Window': Illegal invocation\".\n// This happens when the \"node\" export of \"realm\" is imported from an Electron renderer process.\n// It could be revisited if / when \"realm\" gets a \"browser\" export condition.\nexport const fetch = globalThis.fetch.bind(globalThis);\n","/**\n *  base64.ts\n *\n *  Licensed under the BSD 3-Clause License.\n *    http://opensource.org/licenses/BSD-3-Clause\n *\n *  References:\n *    http://en.wikipedia.org/wiki/Base64\n *\n * @author Dan Kogai (https://github.com/dankogai)\n */\nconst version = '3.7.6';\n/**\n * @deprecated use lowercase `version`.\n */\nconst VERSION = version;\nconst _hasatob = typeof atob === 'function';\nconst _hasbtoa = typeof btoa === 'function';\nconst _hasBuffer = typeof Buffer === 'function';\nconst _TD = typeof TextDecoder === 'function' ? new TextDecoder() : undefined;\nconst _TE = typeof TextEncoder === 'function' ? new TextEncoder() : undefined;\nconst b64ch = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\nconst b64chs = Array.prototype.slice.call(b64ch);\nconst b64tab = ((a) => {\n    let tab = {};\n    a.forEach((c, i) => tab[c] = i);\n    return tab;\n})(b64chs);\nconst b64re = /^(?:[A-Za-z\\d+\\/]{4})*?(?:[A-Za-z\\d+\\/]{2}(?:==)?|[A-Za-z\\d+\\/]{3}=?)?$/;\nconst _fromCC = String.fromCharCode.bind(String);\nconst _U8Afrom = typeof Uint8Array.from === 'function'\n    ? Uint8Array.from.bind(Uint8Array)\n    : (it) => new Uint8Array(Array.prototype.slice.call(it, 0));\nconst _mkUriSafe = (src) => src\n    .replace(/=/g, '').replace(/[+\\/]/g, (m0) => m0 == '+' ? '-' : '_');\nconst _tidyB64 = (s) => s.replace(/[^A-Za-z0-9\\+\\/]/g, '');\n/**\n * polyfill version of `btoa`\n */\nconst btoaPolyfill = (bin) => {\n    // console.log('polyfilled');\n    let u32, c0, c1, c2, asc = '';\n    const pad = bin.length % 3;\n    for (let i = 0; i < bin.length;) {\n        if ((c0 = bin.charCodeAt(i++)) > 255 ||\n            (c1 = bin.charCodeAt(i++)) > 255 ||\n            (c2 = bin.charCodeAt(i++)) > 255)\n            throw new TypeError('invalid character found');\n        u32 = (c0 << 16) | (c1 << 8) | c2;\n        asc += b64chs[u32 >> 18 & 63]\n            + b64chs[u32 >> 12 & 63]\n            + b64chs[u32 >> 6 & 63]\n            + b64chs[u32 & 63];\n    }\n    return pad ? asc.slice(0, pad - 3) + \"===\".substring(pad) : asc;\n};\n/**\n * does what `window.btoa` of web browsers do.\n * @param {String} bin binary string\n * @returns {string} Base64-encoded string\n */\nconst _btoa = _hasbtoa ? (bin) => btoa(bin)\n    : _hasBuffer ? (bin) => Buffer.from(bin, 'binary').toString('base64')\n        : btoaPolyfill;\nconst _fromUint8Array = _hasBuffer\n    ? (u8a) => Buffer.from(u8a).toString('base64')\n    : (u8a) => {\n        // cf. https://stackoverflow.com/questions/12710001/how-to-convert-uint8-array-to-base64-encoded-string/12713326#12713326\n        const maxargs = 0x1000;\n        let strs = [];\n        for (let i = 0, l = u8a.length; i < l; i += maxargs) {\n            strs.push(_fromCC.apply(null, u8a.subarray(i, i + maxargs)));\n        }\n        return _btoa(strs.join(''));\n    };\n/**\n * converts a Uint8Array to a Base64 string.\n * @param {boolean} [urlsafe] URL-and-filename-safe a la RFC4648 §5\n * @returns {string} Base64 string\n */\nconst fromUint8Array = (u8a, urlsafe = false) => urlsafe ? _mkUriSafe(_fromUint8Array(u8a)) : _fromUint8Array(u8a);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const utob = (src: string) => unescape(encodeURIComponent(src));\n// reverting good old fationed regexp\nconst cb_utob = (c) => {\n    if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c\n            : cc < 0x800 ? (_fromCC(0xc0 | (cc >>> 6))\n                + _fromCC(0x80 | (cc & 0x3f)))\n                : (_fromCC(0xe0 | ((cc >>> 12) & 0x0f))\n                    + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n                    + _fromCC(0x80 | (cc & 0x3f)));\n    }\n    else {\n        var cc = 0x10000\n            + (c.charCodeAt(0) - 0xD800) * 0x400\n            + (c.charCodeAt(1) - 0xDC00);\n        return (_fromCC(0xf0 | ((cc >>> 18) & 0x07))\n            + _fromCC(0x80 | ((cc >>> 12) & 0x3f))\n            + _fromCC(0x80 | ((cc >>> 6) & 0x3f))\n            + _fromCC(0x80 | (cc & 0x3f)));\n    }\n};\nconst re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-8 string\n * @returns {string} UTF-16 string\n */\nconst utob = (u) => u.replace(re_utob, cb_utob);\n//\nconst _encode = _hasBuffer\n    ? (s) => Buffer.from(s, 'utf8').toString('base64')\n    : _TE\n        ? (s) => _fromUint8Array(_TE.encode(s))\n        : (s) => _btoa(utob(s));\n/**\n * converts a UTF-8-encoded string to a Base64 string.\n * @param {boolean} [urlsafe] if `true` make the result URL-safe\n * @returns {string} Base64 string\n */\nconst encode = (src, urlsafe = false) => urlsafe\n    ? _mkUriSafe(_encode(src))\n    : _encode(src);\n/**\n * converts a UTF-8-encoded string to URL-safe Base64 RFC4648 §5.\n * @returns {string} Base64 string\n */\nconst encodeURI = (src) => encode(src, true);\n// This trick is found broken https://github.com/dankogai/js-base64/issues/130\n// const btou = (src: string) => decodeURIComponent(escape(src));\n// reverting good old fationed regexp\nconst re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\nconst cb_btou = (cccc) => {\n    switch (cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                | ((0x3f & cccc.charCodeAt(1)) << 12)\n                | ((0x3f & cccc.charCodeAt(2)) << 6)\n                | (0x3f & cccc.charCodeAt(3)), offset = cp - 0x10000;\n            return (_fromCC((offset >>> 10) + 0xD800)\n                + _fromCC((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return _fromCC(((0x0f & cccc.charCodeAt(0)) << 12)\n                | ((0x3f & cccc.charCodeAt(1)) << 6)\n                | (0x3f & cccc.charCodeAt(2)));\n        default:\n            return _fromCC(((0x1f & cccc.charCodeAt(0)) << 6)\n                | (0x3f & cccc.charCodeAt(1)));\n    }\n};\n/**\n * @deprecated should have been internal use only.\n * @param {string} src UTF-16 string\n * @returns {string} UTF-8 string\n */\nconst btou = (b) => b.replace(re_btou, cb_btou);\n/**\n * polyfill version of `atob`\n */\nconst atobPolyfill = (asc) => {\n    // console.log('polyfilled');\n    asc = asc.replace(/\\s+/g, '');\n    if (!b64re.test(asc))\n        throw new TypeError('malformed base64.');\n    asc += '=='.slice(2 - (asc.length & 3));\n    let u24, bin = '', r1, r2;\n    for (let i = 0; i < asc.length;) {\n        u24 = b64tab[asc.charAt(i++)] << 18\n            | b64tab[asc.charAt(i++)] << 12\n            | (r1 = b64tab[asc.charAt(i++)]) << 6\n            | (r2 = b64tab[asc.charAt(i++)]);\n        bin += r1 === 64 ? _fromCC(u24 >> 16 & 255)\n            : r2 === 64 ? _fromCC(u24 >> 16 & 255, u24 >> 8 & 255)\n                : _fromCC(u24 >> 16 & 255, u24 >> 8 & 255, u24 & 255);\n    }\n    return bin;\n};\n/**\n * does what `window.atob` of web browsers do.\n * @param {String} asc Base64-encoded string\n * @returns {string} binary string\n */\nconst _atob = _hasatob ? (asc) => atob(_tidyB64(asc))\n    : _hasBuffer ? (asc) => Buffer.from(asc, 'base64').toString('binary')\n        : atobPolyfill;\n//\nconst _toUint8Array = _hasBuffer\n    ? (a) => _U8Afrom(Buffer.from(a, 'base64'))\n    : (a) => _U8Afrom(_atob(a).split('').map(c => c.charCodeAt(0)));\n/**\n * converts a Base64 string to a Uint8Array.\n */\nconst toUint8Array = (a) => _toUint8Array(_unURI(a));\n//\nconst _decode = _hasBuffer\n    ? (a) => Buffer.from(a, 'base64').toString('utf8')\n    : _TD\n        ? (a) => _TD.decode(_toUint8Array(a))\n        : (a) => btou(_atob(a));\nconst _unURI = (a) => _tidyB64(a.replace(/[-_]/g, (m0) => m0 == '-' ? '+' : '/'));\n/**\n * converts a Base64 string to a UTF-8 string.\n * @param {String} src Base64 string.  Both normal and URL-safe are supported\n * @returns {string} UTF-8 string\n */\nconst decode = (src) => _decode(_unURI(src));\n/**\n * check if a value is a valid Base64 string\n * @param {String} src a value to check\n  */\nconst isValid = (src) => {\n    if (typeof src !== 'string')\n        return false;\n    const s = src.replace(/\\s+/g, '').replace(/={0,2}$/, '');\n    return !/[^\\s0-9a-zA-Z\\+/]/.test(s) || !/[^\\s0-9a-zA-Z\\-_]/.test(s);\n};\n//\nconst _noEnum = (v) => {\n    return {\n        value: v, enumerable: false, writable: true, configurable: true\n    };\n};\n/**\n * extend String.prototype with relevant methods\n */\nconst extendString = function () {\n    const _add = (name, body) => Object.defineProperty(String.prototype, name, _noEnum(body));\n    _add('fromBase64', function () { return decode(this); });\n    _add('toBase64', function (urlsafe) { return encode(this, urlsafe); });\n    _add('toBase64URI', function () { return encode(this, true); });\n    _add('toBase64URL', function () { return encode(this, true); });\n    _add('toUint8Array', function () { return toUint8Array(this); });\n};\n/**\n * extend Uint8Array.prototype with relevant methods\n */\nconst extendUint8Array = function () {\n    const _add = (name, body) => Object.defineProperty(Uint8Array.prototype, name, _noEnum(body));\n    _add('toBase64', function (urlsafe) { return fromUint8Array(this, urlsafe); });\n    _add('toBase64URI', function () { return fromUint8Array(this, true); });\n    _add('toBase64URL', function () { return fromUint8Array(this, true); });\n};\n/**\n * extend Builtin prototypes with relevant methods\n */\nconst extendBuiltins = () => {\n    extendString();\n    extendUint8Array();\n};\nconst gBase64 = {\n    version: version,\n    VERSION: VERSION,\n    atob: _atob,\n    atobPolyfill: atobPolyfill,\n    btoa: _btoa,\n    btoaPolyfill: btoaPolyfill,\n    fromBase64: decode,\n    toBase64: encode,\n    encode: encode,\n    encodeURI: encodeURI,\n    encodeURL: encodeURI,\n    utob: utob,\n    btou: btou,\n    decode: decode,\n    isValid: isValid,\n    fromUint8Array: fromUint8Array,\n    toUint8Array: toUint8Array,\n    extendString: extendString,\n    extendUint8Array: extendUint8Array,\n    extendBuiltins: extendBuiltins\n};\n// makecjs:CUT //\nexport { version };\nexport { VERSION };\nexport { _atob as atob };\nexport { atobPolyfill };\nexport { _btoa as btoa };\nexport { btoaPolyfill };\nexport { decode as fromBase64 };\nexport { encode as toBase64 };\nexport { utob };\nexport { encode };\nexport { encodeURI };\nexport { encodeURI as encodeURL };\nexport { btou };\nexport { decode };\nexport { isValid };\nexport { fromUint8Array };\nexport { toUint8Array };\nexport { extendString };\nexport { extendUint8Array };\nexport { extendBuiltins };\n// and finally,\nexport { gBase64 as Base64 };\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { EJSON } from \"bson\";\r\n\r\ntype SimpleObject = Record<string, unknown>;\r\n\r\nconst SERIALIZATION_OPTIONS = {\r\n  relaxed: false, // Ensure Canonical mode\r\n};\r\n\r\n/**\r\n * Serialize an object containing BSON types into extended-JSON.\r\n * @param obj The object containing BSON types.\r\n * @returns The document in extended-JSON format.\r\n */\r\nexport function serialize<Obj extends SimpleObject>(obj: Obj): SimpleObject {\r\n  return EJSON.serialize(obj, SERIALIZATION_OPTIONS);\r\n}\r\n\r\n/**\r\n * De-serialize an object or an array of object from extended-JSON into an object or an array of object with BSON types.\r\n * @param obj The object or array of objects in extended-JSON format.\r\n * @returns The object or array of objects with inflated BSON types.\r\n */\r\nexport function deserialize(obj: SimpleObject | SimpleObject[]): EJSON.SerializableTypes {\r\n  if (Array.isArray(obj)) {\r\n    return obj.map((doc) => EJSON.deserialize(doc));\r\n  } else {\r\n    return EJSON.deserialize(obj);\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { deserialize } from \"./utils/ejson\";\r\n\r\n/**\r\n * The type of a user.\r\n */\r\nenum UserType {\r\n  /**\r\n   * A normal end-user created this user.\r\n   */\r\n  Normal = \"normal\",\r\n  /**\r\n   * The user was created by the server.\r\n   */\r\n  Server = \"server\",\r\n}\r\n\r\n/** @ignore */\r\nenum DataKey {\r\n  /** @ignore */\r\n  NAME = \"name\",\r\n  /** @ignore */\r\n  EMAIL = \"email\",\r\n  /** @ignore */\r\n  PICTURE = \"picture\",\r\n  /** @ignore */\r\n  FIRST_NAME = \"first_name\",\r\n  /** @ignore */\r\n  LAST_NAME = \"last_name\",\r\n  /** @ignore */\r\n  GENDER = \"gender\",\r\n  /** @ignore */\r\n  BIRTHDAY = \"birthday\",\r\n  /** @ignore */\r\n  MIN_AGE = \"min_age\",\r\n  /** @ignore */\r\n  MAX_AGE = \"max_age\",\r\n}\r\n\r\nconst DATA_MAPPING: { [k in DataKey]: keyof Realm.DefaultUserProfileData } = {\r\n  [DataKey.NAME]: \"name\",\r\n  [DataKey.EMAIL]: \"email\",\r\n  [DataKey.PICTURE]: \"pictureUrl\",\r\n  [DataKey.FIRST_NAME]: \"firstName\",\r\n  [DataKey.LAST_NAME]: \"lastName\",\r\n  [DataKey.GENDER]: \"gender\",\r\n  [DataKey.BIRTHDAY]: \"birthday\",\r\n  [DataKey.MIN_AGE]: \"minAge\",\r\n  [DataKey.MAX_AGE]: \"maxAge\",\r\n};\r\n\r\n/** @inheritdoc */\r\nexport class UserProfile<UserProfileDataType = Realm.DefaultUserProfileData> {\r\n  /** @ignore */\r\n  public readonly type: Realm.UserType = UserType.Normal;\r\n\r\n  /** @ignore */\r\n  public readonly identities: Realm.UserIdentity[] = [];\r\n\r\n  /** @ignore */\r\n  public readonly data: UserProfileDataType;\r\n\r\n  /**\r\n   * @param response The response of a call fetching the users profile.\r\n   */\r\n  constructor(response?: unknown) {\r\n    if (typeof response === \"object\" && response !== null) {\r\n      const { type, identities, data } = response as {\r\n        [k: string]: unknown;\r\n      };\r\n\r\n      if (typeof type === \"string\") {\r\n        this.type = type as UserType;\r\n      } else {\r\n        throw new Error(\"Expected 'type' in the response body\");\r\n      }\r\n\r\n      if (Array.isArray(identities)) {\r\n        this.identities = identities.map((identity: unknown) => {\r\n          const { id, provider_type: providerType } = identity as Record<string, string>;\r\n          return { id, providerType } as Realm.UserIdentity;\r\n        });\r\n      } else {\r\n        throw new Error(\"Expected 'identities' in the response body\");\r\n      }\r\n\r\n      if (typeof data === \"object\" && data !== null) {\r\n        const mappedData = Object.fromEntries(\r\n          Object.entries(data).map(([key, value]) => {\r\n            if (key in DATA_MAPPING) {\r\n              // Translate any known data field to its JS idiomatic alias\r\n              return [DATA_MAPPING[key as DataKey], value];\r\n            } else {\r\n              // Pass through any other values\r\n              return [key, value];\r\n            }\r\n          }),\r\n        );\r\n        // We can use `any` since we trust the user supplies the correct type\r\n        this.data = deserialize(mappedData) as UserProfileDataType;\r\n      } else {\r\n        throw new Error(\"Expected 'data' in the response body\");\r\n      }\r\n    } else {\r\n      this.data = {} as UserProfileDataType;\r\n    }\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { PrefixedStorage, Storage } from \"./storage\";\r\nimport { UserProfile } from \"./UserProfile\";\r\nimport { ProviderType } from \"./Credentials\";\r\n\r\nconst ACCESS_TOKEN_STORAGE_KEY = \"accessToken\";\r\nconst REFRESH_TOKEN_STORAGE_KEY = \"refreshToken\";\r\nconst PROFILE_STORAGE_KEY = \"profile\";\r\nconst PROVIDER_TYPE_STORAGE_KEY = \"providerType\";\r\n\r\n/**\r\n * Storage specific to the app.\r\n */\r\nexport class UserStorage<UserProfileDataType = Realm.DefaultUserProfileData> extends PrefixedStorage {\r\n  /**\r\n   * Construct a storage for a `User`.\r\n   * @param storage The underlying storage to wrap.\r\n   * @param userId The id of the user.\r\n   */\r\n  constructor(storage: Storage, userId: string) {\r\n    super(storage, `user(${userId})`);\r\n  }\r\n\r\n  /**\r\n   * Get the access token from storage.\r\n   * @returns Access token (null if unknown).\r\n   */\r\n  get accessToken(): string | null {\r\n    return this.get(ACCESS_TOKEN_STORAGE_KEY);\r\n  }\r\n\r\n  /**\r\n   * Set the access token in storage.\r\n   * @param value Access token (null if unknown).\r\n   */\r\n  set accessToken(value: string | null) {\r\n    if (value === null) {\r\n      this.remove(ACCESS_TOKEN_STORAGE_KEY);\r\n    } else {\r\n      this.set(ACCESS_TOKEN_STORAGE_KEY, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the refresh token from storage.\r\n   * @returns Refresh token (null if unknown and user is logged out).\r\n   */\r\n  get refreshToken(): string | null {\r\n    return this.get(REFRESH_TOKEN_STORAGE_KEY);\r\n  }\r\n\r\n  /**\r\n   * Set the refresh token in storage.\r\n   * @param value Refresh token (null if unknown and user is logged out).\r\n   */\r\n  set refreshToken(value: string | null) {\r\n    if (value === null) {\r\n      this.remove(REFRESH_TOKEN_STORAGE_KEY);\r\n    } else {\r\n      this.set(REFRESH_TOKEN_STORAGE_KEY, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the user profile from storage.\r\n   * @returns User profile (undefined if its unknown).\r\n   */\r\n  get profile(): UserProfile<UserProfileDataType> | undefined {\r\n    const value = this.get(PROFILE_STORAGE_KEY);\r\n    if (value) {\r\n      const profile = new UserProfile<UserProfileDataType>();\r\n      // Patch in the values\r\n      Object.assign(profile, JSON.parse(value));\r\n      return profile;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the user profile in storage.\r\n   * @param value User profile (undefined if its unknown).\r\n   */\r\n  set profile(value: UserProfile<UserProfileDataType> | undefined) {\r\n    if (value) {\r\n      this.set(PROFILE_STORAGE_KEY, JSON.stringify(value));\r\n    } else {\r\n      this.remove(PROFILE_STORAGE_KEY);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the type of authentication provider used to authenticate\r\n   * @returns User profile (undefined if its unknown).\r\n   */\r\n  get providerType(): ProviderType | undefined {\r\n    const value = this.get(PROVIDER_TYPE_STORAGE_KEY);\r\n    if (value) {\r\n      return value as ProviderType;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the type of authentication provider used to authenticate\r\n   * @param value Type of authentication provider.\r\n   */\r\n  set providerType(value: ProviderType | undefined) {\r\n    if (value) {\r\n      this.set(PROVIDER_TYPE_STORAGE_KEY, value);\r\n    } else {\r\n      this.remove(PROVIDER_TYPE_STORAGE_KEY);\r\n    }\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * @param obj The object to remove keys (and undefined values from)\r\n * @returns A new object without the keys where the value is undefined.\r\n */\r\nexport function removeKeysWithUndefinedValues<T extends Record<string, unknown>>(obj: T): T {\r\n  return Object.fromEntries(Object.entries(obj).filter((entry) => typeof entry[1] !== \"undefined\")) as T;\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { removeKeysWithUndefinedValues } from \"./objects\";\r\n\r\n/**\r\n * Generate a random sequence of characters.\r\n * @param length The length of the string.\r\n * @param alphabet The alphabet of characters to pick from.\r\n * @returns A string of characters picked randomly from `alphabet`.\r\n */\r\nexport function generateRandomString(length: number, alphabet: string): string {\r\n  let result = \"\";\r\n  for (let i = 0; i < length; i++) {\r\n    result += alphabet[Math.floor(Math.random() * alphabet.length)];\r\n  }\r\n  return result;\r\n}\r\n\r\n/** Parameters passed in a query string */\r\nexport type QueryParams = {\r\n  [key: string]: string | number | boolean;\r\n};\r\n\r\n/**\r\n * Encode an object mapping from string to string, into a query string to be appended a URL.\r\n * @param params The parameters to include in the string.\r\n * @param prefixed Should the \"?\" prefix be added if values exists?\r\n * @returns A URL encoded representation of the parameters (omitting a \"?\" prefix).\r\n */\r\nexport function encodeQueryString<P extends Partial<QueryParams>>(params: P, prefixed = true): string {\r\n  // Filter out undefined values\r\n  const cleanedParams = removeKeysWithUndefinedValues(params) as QueryParams;\r\n  // Determine if a prefixed \"?\" is appropreate\r\n  const prefix = prefixed && Object.keys(cleanedParams).length > 0 ? \"?\" : \"\";\r\n  // Transform keys and values to a query string\r\n  return (\r\n    prefix +\r\n    Object.entries(cleanedParams)\r\n      .map(([k, v]) => `${k}=${encodeURIComponent(v)}`)\r\n      .join(\"&\")\r\n  );\r\n}\r\n\r\n/**\r\n * Decodes a query string into an object.\r\n * @param str The query string to decode.\r\n * @returns The decoded query string.\r\n */\r\nexport function decodeQueryString(str: string): Record<string, string> {\r\n  const cleanStr = str[0] === \"?\" ? str.substr(1) : str;\r\n  return Object.fromEntries(\r\n    cleanStr\r\n      .split(\"&\")\r\n      .filter((s) => s.length > 0)\r\n      .map((kvp) => kvp.split(\"=\"))\r\n      .map(([k, v]) => [k, decodeURIComponent(v)]),\r\n  );\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { Base64 } from \"js-base64\";\r\n\r\nimport { Fetcher } from \"./Fetcher\";\r\nimport { serialize } from \"./utils/ejson\";\r\nimport { encodeQueryString } from \"./utils/string\";\r\n\r\n/**\r\n * A list of names that functions cannot have to be callable through the functions proxy.\r\n */\r\nconst RESERVED_NAMES = [\r\n  \"inspect\",\r\n  \"callFunction\",\r\n  \"callFunctionStreaming\",\r\n  // Methods defined on the Object.prototype might be \"typeof probed\" and called by libraries and runtime environments.\r\n  ...Object.getOwnPropertyNames(Object.prototype),\r\n];\r\n\r\ntype SimpleObject = Record<string, unknown>;\r\n\r\n/**\r\n * The body of the request sent to call a remote function.\r\n */\r\ninterface CallFunctionBody {\r\n  /**\r\n   * Name of the function.\r\n   */\r\n  name: string;\r\n  /**\r\n   * An array of arguments to pass to the function.\r\n   */\r\n  arguments: unknown[];\r\n  /**\r\n   * An optional name of the service in which the function is defined.\r\n   */\r\n  service?: string;\r\n}\r\n\r\n/**\r\n * Pass an object implementing this interface when constructing a functions factory.\r\n */\r\nexport interface FunctionsFactoryConfiguration {\r\n  /**\r\n   * An optional name of the service in which functions are defined.\r\n   */\r\n  serviceName?: string;\r\n  /**\r\n   * Call this function to transform the arguments before they're sent to the service.\r\n   */\r\n  argsTransformation?: (args: unknown[]) => unknown[];\r\n}\r\n\r\n/**\r\n * Remove the key for any fields with undefined values.\r\n * @param args The arguments to clean.\r\n * @returns The cleaned arguments.\r\n */\r\nexport function cleanArgs(args: unknown[]): typeof args {\r\n  for (const arg of args) {\r\n    if (typeof arg === \"object\" && arg) {\r\n      for (const [key, value] of Object.entries(arg)) {\r\n        if (value === undefined) {\r\n          delete (arg as SimpleObject)[key];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  return args;\r\n}\r\n\r\n/**\r\n * Remove keys for any undefined values and serialize to EJSON.\r\n * @param args The arguments to clean and serialize.\r\n * @returns The cleaned and serialized arguments.\r\n */\r\nfunction cleanArgsAndSerialize(args: unknown[]) {\r\n  const cleaned = cleanArgs(args);\r\n  return cleaned.map((arg) => (typeof arg === \"object\" ? serialize(arg as SimpleObject) : arg));\r\n}\r\n\r\n/**\r\n * Defines how functions are called.\r\n */\r\nexport class FunctionsFactory {\r\n  /**\r\n   * Create a factory of functions, wrapped in a Proxy that returns bound copies of `callFunction` on any property.\r\n   * @param fetcher The underlying fetcher to use when requesting.\r\n   * @param config Additional configuration parameters.\r\n   * @returns The newly created factory of functions.\r\n   */\r\n  public static create<FunctionsFactoryType extends SimpleObject = Realm.DefaultFunctionsFactory>(\r\n    fetcher: Fetcher,\r\n    config: FunctionsFactoryConfiguration = {},\r\n  ): FunctionsFactoryType & Realm.BaseFunctionsFactory {\r\n    // Create a proxy, wrapping a simple object returning methods that calls functions\r\n    // TODO: Lazily fetch available functions and return these from the ownKeys() trap\r\n    const factory: Realm.BaseFunctionsFactory = new FunctionsFactory(fetcher, config);\r\n    // Wrap the factory in a proxy that calls the internal call method\r\n    return new Proxy(factory, {\r\n      get(target, p, receiver) {\r\n        if (typeof p === \"string\" && RESERVED_NAMES.indexOf(p) === -1) {\r\n          return target.callFunction.bind(target, p);\r\n        } else {\r\n          const prop = Reflect.get(target, p, receiver);\r\n          return typeof prop === \"function\" ? prop.bind(target) : prop;\r\n        }\r\n      },\r\n    }) as FunctionsFactoryType & typeof factory;\r\n  }\r\n\r\n  /**\r\n   * The underlying fetcher to use when requesting.\r\n   */\r\n  private readonly fetcher: Fetcher;\r\n\r\n  /**\r\n   * An optional name of the service in which functions are defined.\r\n   */\r\n  private readonly serviceName?: string;\r\n\r\n  /**\r\n   * Call this function to transform the arguments before they're sent to the service.\r\n   */\r\n  private readonly argsTransformation?: (args: unknown[]) => unknown[];\r\n\r\n  /**\r\n   * @param fetcher The underlying fetcher to use when sending requests.\r\n   * @param config Additional configuration parameters.\r\n   */\r\n  constructor(fetcher: Fetcher, config: FunctionsFactoryConfiguration = {}) {\r\n    this.fetcher = fetcher;\r\n    this.serviceName = config.serviceName;\r\n    this.argsTransformation = config.argsTransformation || cleanArgsAndSerialize;\r\n  }\r\n\r\n  /**\r\n   * Call a remote function by it's name.\r\n   * @param name Name of the remote function.\r\n   * @param args Arguments to pass to the remote function.\r\n   * @returns A promise of the value returned when executing the remote function.\r\n   */\r\n  async callFunction(name: string, ...args: unknown[]): Promise<unknown> {\r\n    // See https://github.com/mongodb/stitch-js-sdk/blob/master/packages/core/sdk/src/services/internal/CoreStitchServiceClientImpl.ts\r\n    const body: CallFunctionBody = {\r\n      name,\r\n      arguments: this.argsTransformation ? this.argsTransformation(args) : args,\r\n    };\r\n    if (this.serviceName) {\r\n      body.service = this.serviceName;\r\n    }\r\n    const appRoute = this.fetcher.appRoute;\r\n    return this.fetcher.fetchJSON({\r\n      method: \"POST\",\r\n      path: appRoute.functionsCall().path,\r\n      body,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Call a remote function by it's name.\r\n   * @param name Name of the remote function.\r\n   * @param args Arguments to pass to the remote function.\r\n   * @returns A promise of the value returned when executing the remote function.\r\n   */\r\n  public callFunctionStreaming(name: string, ...args: unknown[]): Promise<AsyncIterable<Uint8Array>> {\r\n    const body: CallFunctionBody = {\r\n      name,\r\n      arguments: this.argsTransformation ? this.argsTransformation(args) : args,\r\n    };\r\n    if (this.serviceName) {\r\n      body.service = this.serviceName;\r\n    }\r\n    const appRoute = this.fetcher.appRoute;\r\n    const qs = encodeQueryString({\r\n      [\"baas_request\"]: Base64.encode(JSON.stringify(body)),\r\n    });\r\n    return this.fetcher.fetchStream({\r\n      method: \"GET\",\r\n      path: appRoute.functionsCall().path + qs,\r\n    });\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { Fetcher } from \"../Fetcher\";\r\n\r\n/** @inheritdoc */\r\nexport class EmailPasswordAuth implements Realm.Auth.EmailPasswordAuth {\r\n  private readonly fetcher: Fetcher;\r\n  private readonly providerName: string;\r\n\r\n  /**\r\n   * Construct an interface to the email / password authentication provider.\r\n   * @param fetcher The underlying fetcher used to request the services.\r\n   * @param providerName Optional custom name of the authentication provider.\r\n   */\r\n  constructor(fetcher: Fetcher, providerName = \"local-userpass\") {\r\n    this.fetcher = fetcher;\r\n    this.providerName = providerName;\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  async registerUser(details: Realm.Auth.RegisterUserDetails): Promise<void> {\r\n    const appRoute = this.fetcher.appRoute;\r\n    await this.fetcher.fetchJSON({\r\n      method: \"POST\",\r\n      path: appRoute.emailPasswordAuth(this.providerName).register().path,\r\n      body: details,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  async confirmUser(details: Realm.Auth.ConfirmUserDetails): Promise<void> {\r\n    const appRoute = this.fetcher.appRoute;\r\n    await this.fetcher.fetchJSON({\r\n      method: \"POST\",\r\n      path: appRoute.emailPasswordAuth(this.providerName).confirm().path,\r\n      body: details,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  async resendConfirmationEmail(details: Realm.Auth.ResendConfirmationDetails): Promise<void> {\r\n    const appRoute = this.fetcher.appRoute;\r\n    await this.fetcher.fetchJSON({\r\n      method: \"POST\",\r\n      path: appRoute.emailPasswordAuth(this.providerName).confirmSend().path,\r\n      body: details,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  async retryCustomConfirmation(details: Realm.Auth.RetryCustomConfirmationDetails): Promise<void> {\r\n    const appRoute = this.fetcher.appRoute;\r\n    await this.fetcher.fetchJSON({\r\n      method: \"POST\",\r\n      path: appRoute.emailPasswordAuth(this.providerName).confirmCall().path,\r\n      body: details,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  async resetPassword(details: Realm.Auth.ResetPasswordDetails): Promise<void> {\r\n    const appRoute = this.fetcher.appRoute;\r\n    await this.fetcher.fetchJSON({\r\n      method: \"POST\",\r\n      path: appRoute.emailPasswordAuth(this.providerName).reset().path,\r\n      body: details,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  async sendResetPasswordEmail(details: Realm.Auth.SendResetPasswordDetails): Promise<void> {\r\n    const appRoute = this.fetcher.appRoute;\r\n    await this.fetcher.fetchJSON({\r\n      method: \"POST\",\r\n      path: appRoute.emailPasswordAuth(this.providerName).resetSend().path,\r\n      body: details,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  async callResetPasswordFunction(\r\n    details: Realm.Auth.CallResetPasswordFunctionDetails,\r\n    ...args: unknown[]\r\n  ): Promise<void> {\r\n    const appRoute = this.fetcher.appRoute;\r\n    await this.fetcher.fetchJSON({\r\n      method: \"POST\",\r\n      path: appRoute.emailPasswordAuth(this.providerName).resetCall().path,\r\n      body: { ...details, arguments: args },\r\n    });\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\n/**\r\n * @returns The base api route.\r\n */\r\nfunction api() {\r\n  return {\r\n    path: \"/api/client/v2.0\",\r\n    /**\r\n     * @param appId The id of the app.\r\n     * @returns The URL of the app endpoint.\r\n     */\r\n    app(appId: string) {\r\n      return {\r\n        path: this.path + `/app/${appId}`,\r\n        /**\r\n         * @returns The URL of the app location endpoint.\r\n         */\r\n        location() {\r\n          return {\r\n            path: this.path + \"/location\",\r\n          };\r\n        },\r\n        /**\r\n         * @param providerName The name of the provider.\r\n         * @returns The app url concatinated with the /auth/providers/{providerName}\r\n         */\r\n        authProvider(providerName: string) {\r\n          return {\r\n            path: this.path + `/auth/providers/${providerName}`,\r\n            /**\r\n             * @returns Get the URL of an authentication provider.\r\n             */\r\n            login() {\r\n              return { path: this.path + \"/login\" };\r\n            },\r\n          };\r\n        },\r\n        /**\r\n         * @param providerName The name of the provider.\r\n         * @returns The app url concatinated with the /auth/providers/{providerName}\r\n         */\r\n        emailPasswordAuth(providerName: string) {\r\n          const authProviderRoutes = this.authProvider(providerName);\r\n          return {\r\n            ...authProviderRoutes,\r\n            register() {\r\n              return { path: this.path + \"/register\" };\r\n            },\r\n            confirm() {\r\n              return { path: this.path + \"/confirm\" };\r\n            },\r\n            confirmSend() {\r\n              return { path: this.path + \"/confirm/send\" };\r\n            },\r\n            confirmCall() {\r\n              return { path: this.path + \"/confirm/call\" };\r\n            },\r\n            reset() {\r\n              return { path: this.path + \"/reset\" };\r\n            },\r\n            resetSend() {\r\n              return { path: this.path + \"/reset/send\" };\r\n            },\r\n            resetCall() {\r\n              return { path: this.path + \"/reset/call\" };\r\n            },\r\n          };\r\n        },\r\n        functionsCall() {\r\n          return {\r\n            path: this.path + \"/functions/call\",\r\n          };\r\n        },\r\n      };\r\n    },\r\n    auth() {\r\n      return {\r\n        path: this.path + \"/auth\",\r\n        apiKeys() {\r\n          return {\r\n            path: this.path + \"/api_keys\",\r\n            key(id: string) {\r\n              return {\r\n                path: this.path + `/${id}`,\r\n                enable() {\r\n                  return { path: this.path + \"/enable\" };\r\n                },\r\n                disable() {\r\n                  return { path: this.path + \"/disable\" };\r\n                },\r\n              };\r\n            },\r\n          };\r\n        },\r\n        profile() {\r\n          return { path: this.path + \"/profile\" };\r\n        },\r\n        session() {\r\n          return { path: this.path + \"/session\" };\r\n        },\r\n        delete() {\r\n          return { path: this.path + \"/delete\" };\r\n        },\r\n      };\r\n    },\r\n  };\r\n}\r\n\r\nexport default { api };\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { Fetcher } from \"../Fetcher\";\r\nimport routes from \"../routes\";\r\n\r\n/** @inheritdoc */\r\nexport class ApiKeyAuth implements Realm.Auth.ApiKeyAuth {\r\n  /**\r\n   * The fetcher used to send requests to services.\r\n   */\r\n  private readonly fetcher: Fetcher;\r\n\r\n  /**\r\n   * Construct an interface to the API-key authentication provider.\r\n   * @param fetcher The fetcher used to send requests to services.\r\n   */\r\n  constructor(fetcher: Fetcher) {\r\n    this.fetcher = fetcher;\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  create(name: string): Promise<Realm.Auth.ApiKey> {\r\n    return this.fetcher.fetchJSON({\r\n      method: \"POST\",\r\n      body: { name },\r\n      path: routes.api().auth().apiKeys().path,\r\n      tokenType: \"refresh\",\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  fetch(keyId: string): Promise<Realm.Auth.ApiKey> {\r\n    return this.fetcher.fetchJSON({\r\n      method: \"GET\",\r\n      path: routes.api().auth().apiKeys().key(keyId).path,\r\n      tokenType: \"refresh\",\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  fetchAll(): Promise<Realm.Auth.ApiKey[]> {\r\n    return this.fetcher.fetchJSON({\r\n      method: \"GET\",\r\n      tokenType: \"refresh\",\r\n      path: routes.api().auth().apiKeys().path,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  async delete(keyId: string): Promise<void> {\r\n    await this.fetcher.fetchJSON({\r\n      method: \"DELETE\",\r\n      path: routes.api().auth().apiKeys().key(keyId).path,\r\n      tokenType: \"refresh\",\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  async enable(keyId: string): Promise<void> {\r\n    await this.fetcher.fetchJSON({\r\n      method: \"PUT\",\r\n      path: routes.api().auth().apiKeys().key(keyId).enable().path,\r\n      tokenType: \"refresh\",\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  async disable(keyId: string): Promise<void> {\r\n    await this.fetcher.fetchJSON({\r\n      method: \"PUT\",\r\n      path: routes.api().auth().apiKeys().key(keyId).disable().path,\r\n      tokenType: \"refresh\",\r\n    });\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\ntype WatchErrorParameters = {\r\n  message: string;\r\n  code: string;\r\n};\r\n\r\n/**\r\n * An error occured during the parsing of a watch stream.\r\n */\r\nexport class WatchError extends Error {\r\n  /**\r\n   * The name of this type of error\r\n   */\r\n  public readonly name = \"WatchError\";\r\n\r\n  /**\r\n   * An code associated with the type of error.\r\n   */\r\n  public readonly code: string;\r\n\r\n  constructor({ message, code }: WatchErrorParameters) {\r\n    super(message);\r\n    this.code = code;\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { EJSON } from \"bson\";\r\n\r\nimport { getEnvironment } from \"../../environment\";\r\nimport { WatchError } from \"./WatchError\";\r\n\r\ntype Document = Realm.Services.MongoDB.Document;\r\ntype ChangeEvent<T extends Document> = Realm.Services.MongoDB.ChangeEvent<T>;\r\n\r\ntype ServerSentEvent = {\r\n  data: string;\r\n  eventType?: string;\r\n};\r\n\r\n// NOTE: this is a fully processed event, not a single \"data: foo\" line!\r\n/**\r\n * The state of a WatchStream.\r\n */\r\nexport enum WatchStreamState {\r\n  /**\r\n   * Need to call one of the feed functions.\r\n   */\r\n  NEED_DATA = \"NEED_DATA\",\r\n  /**\r\n   * Call nextEvent() to consume an event.\r\n   */\r\n  HAVE_EVENT = \"HAVE_EVENT\",\r\n  /**\r\n   * Call error().\r\n   */\r\n  HAVE_ERROR = \"HAVE_ERROR\",\r\n}\r\n\r\n/**\r\n * Represents a stream of events\r\n */\r\nexport class WatchStream<T extends Document = Document> {\r\n  // Call these when you have data, in whatever shape is easiest for your SDK to get.\r\n  // Pick one, mixing and matching on a single instance isn't supported.\r\n  // These can only be called in NEED_DATA state, which is the initial state.\r\n  feedBuffer(buffer: Uint8Array): void {\r\n    this.assertState(WatchStreamState.NEED_DATA);\r\n    this._buffer += this._textDecoder.decode(buffer, { stream: true });\r\n    this.advanceBufferState();\r\n  }\r\n\r\n  feedLine(line: string): void {\r\n    this.assertState(WatchStreamState.NEED_DATA);\r\n    // This is an implementation of the algorithm described at\r\n    // https://html.spec.whatwg.org/multipage/server-sent-events.html#event-stream-interpretation.\r\n    // Currently the server does not use id or retry lines, so that processing isn't implemented.\r\n\r\n    // ignore trailing LF if not removed by SDK.\r\n    if (line.endsWith(\"\\n\")) line = line.substr(0, line.length - 1);\r\n\r\n    // ignore trailing CR from CRLF\r\n    if (line.endsWith(\"\\r\")) line = line.substr(0, line.length - 1);\r\n\r\n    if (line.length === 0) {\r\n      // This is the \"dispatch the event\" portion of the algorithm.\r\n      if (this._dataBuffer.length === 0) {\r\n        this._eventType = \"\";\r\n        return;\r\n      }\r\n\r\n      if (this._dataBuffer.endsWith(\"\\n\")) this._dataBuffer = this._dataBuffer.substr(0, this._dataBuffer.length - 1);\r\n\r\n      this.feedSse({\r\n        data: this._dataBuffer,\r\n        eventType: this._eventType,\r\n      });\r\n      this._dataBuffer = \"\";\r\n      this._eventType = \"\";\r\n    }\r\n\r\n    if (line[0] === \":\") return;\r\n\r\n    const colon = line.indexOf(\":\");\r\n    const field = line.substr(0, colon);\r\n    let value = colon === -1 ? \"\" : line.substr(colon + 1);\r\n    if (value.startsWith(\" \")) value = value.substr(1);\r\n\r\n    if (field === \"event\") {\r\n      this._eventType = value;\r\n    } else if (field === \"data\") {\r\n      this._dataBuffer += value;\r\n      this._dataBuffer += \"\\n\";\r\n    } else {\r\n      // line is ignored (even if field is id or retry).\r\n    }\r\n  }\r\n\r\n  feedSse(sse: ServerSentEvent): void {\r\n    this.assertState(WatchStreamState.NEED_DATA);\r\n    const firstPercentIndex = sse.data.indexOf(\"%\");\r\n    if (firstPercentIndex !== -1) {\r\n      // For some reason, the stich server decided to add percent-encoding for '%', '\\n', and '\\r' to its\r\n      // event-stream replies. But it isn't real urlencoding, since most characters pass through, so we can't use\r\n      // uri_percent_decode() here.\r\n      let buffer = \"\";\r\n      let start = 0;\r\n      for (let percentIndex = firstPercentIndex; percentIndex !== -1; percentIndex = sse.data.indexOf(\"%\", start)) {\r\n        buffer += sse.data.substr(start, percentIndex - start);\r\n\r\n        const encoded = sse.data.substr(percentIndex, 3); // may be smaller than 3 if string ends with %\r\n        if (encoded === \"%25\") {\r\n          buffer += \"%\";\r\n        } else if (encoded === \"%0A\") {\r\n          buffer += \"\\x0A\"; // '\\n'\r\n        } else if (encoded === \"%0D\") {\r\n          buffer += \"\\x0D\"; // '\\r'\r\n        } else {\r\n          buffer += encoded; // propagate as-is\r\n        }\r\n        start = percentIndex + encoded.length;\r\n      }\r\n\r\n      // Advance the buffer with the last part\r\n      buffer += sse.data.substr(start);\r\n\r\n      sse.data = buffer;\r\n    }\r\n\r\n    if (!sse.eventType || sse.eventType === \"message\") {\r\n      try {\r\n        const parsed = EJSON.parse(sse.data);\r\n        if (typeof parsed === \"object\") {\r\n          // ???\r\n          this._nextEvent = parsed as ChangeEvent<T>;\r\n          this._state = WatchStreamState.HAVE_EVENT;\r\n          return;\r\n        }\r\n      } catch {\r\n        // fallthrough to same handling as for non-document value.\r\n      }\r\n      this._state = WatchStreamState.HAVE_ERROR;\r\n      this._error = new WatchError({\r\n        message: \"server returned malformed event: \" + sse.data,\r\n        code: \"bad bson parse\",\r\n      });\r\n    } else if (sse.eventType === \"error\") {\r\n      this._state = WatchStreamState.HAVE_ERROR;\r\n\r\n      // default error message if we have issues parsing the reply.\r\n      this._error = new WatchError({\r\n        message: sse.data,\r\n        code: \"unknown\",\r\n      });\r\n      try {\r\n        const { error_code: errorCode, error } = EJSON.parse(sse.data) as Record<string, string>;\r\n        if (typeof errorCode !== \"string\") return;\r\n        if (typeof error !== \"string\") return;\r\n        // XXX in realm-js, object-store will error if the error_code is not one of the known\r\n        // error code enum values.\r\n        this._error = new WatchError({\r\n          message: error,\r\n          code: errorCode,\r\n        });\r\n      } catch {\r\n        return; // Use the default state.\r\n      }\r\n    } else {\r\n      // Ignore other event types\r\n    }\r\n  }\r\n\r\n  get state(): WatchStreamState {\r\n    return this._state;\r\n  }\r\n\r\n  // Consumes the returned event. If you used feedBuffer(), there may be another event or error after this one,\r\n  // so you need to call state() again to see what to do next.\r\n  nextEvent(): ChangeEvent<T> {\r\n    this.assertState(WatchStreamState.HAVE_EVENT);\r\n    // We can use \"as ChangeEvent<T>\" since we just asserted the state.\r\n    const out = this._nextEvent as ChangeEvent<T>;\r\n    this._state = WatchStreamState.NEED_DATA;\r\n    this.advanceBufferState();\r\n    return out;\r\n  }\r\n\r\n  // Once this enters the error state, it stays that way. You should not feed any more data.\r\n  get error(): WatchError | null {\r\n    return this._error;\r\n  }\r\n\r\n  ////////////////////////////////////////////\r\n\r\n  private advanceBufferState() {\r\n    this.assertState(WatchStreamState.NEED_DATA);\r\n    while (this.state === WatchStreamState.NEED_DATA) {\r\n      if (this._bufferOffset === this._buffer.length) {\r\n        this._buffer = \"\";\r\n        this._bufferOffset = 0;\r\n        return;\r\n      }\r\n\r\n      // NOTE not supporting CR-only newlines, just LF and CRLF.\r\n      const nextNewlineIndex = this._buffer.indexOf(\"\\n\", this._bufferOffset);\r\n      if (nextNewlineIndex === -1) {\r\n        // We have a partial line.\r\n        if (this._bufferOffset !== 0) {\r\n          // Slide the partial line down to the front of the buffer.\r\n          this._buffer = this._buffer.substr(this._bufferOffset, this._buffer.length - this._bufferOffset);\r\n          this._bufferOffset = 0;\r\n        }\r\n        return;\r\n      }\r\n\r\n      this.feedLine(this._buffer.substr(this._bufferOffset, nextNewlineIndex - this._bufferOffset));\r\n      this._bufferOffset = nextNewlineIndex + 1; // Advance past this line, including its newline.\r\n    }\r\n  }\r\n\r\n  private assertState(state: WatchStreamState) {\r\n    if (this._state !== state) {\r\n      throw Error(`Expected WatchStream to be in state ${state}, but in state ${this._state}`);\r\n    }\r\n  }\r\n\r\n  private _nextEvent: ChangeEvent<T> | undefined;\r\n\r\n  private _state: WatchStreamState = WatchStreamState.NEED_DATA;\r\n\r\n  private _error: WatchError | null = null;\r\n\r\n  // Used by feedBuffer to construct lines\r\n  private _textDecoder = new (getEnvironment().TextDecoder)();\r\n  private _buffer = \"\";\r\n  private _bufferOffset = 0;\r\n\r\n  // Used by feedLine for building the next SSE\r\n  private _eventType = \"\";\r\n  private _dataBuffer = \"\";\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { Fetcher } from \"../../Fetcher\";\r\nimport { FunctionsFactory } from \"../../FunctionsFactory\";\r\n\r\nimport { WatchStream, WatchStreamState } from \"./WatchStream\";\r\n\r\ntype Document = Realm.Services.MongoDB.Document;\r\ntype NewDocument<T extends Document> = Realm.Services.MongoDB.NewDocument<T>;\r\ntype ChangeEvent<T extends Document> = Realm.Services.MongoDB.ChangeEvent<T>;\r\ntype InsertOneResult<IdType> = Realm.Services.MongoDB.InsertOneResult<IdType>;\r\ntype InsertManyResult<IdType> = Realm.Services.MongoDB.InsertManyResult<IdType>;\r\ntype DeleteResult = Realm.Services.MongoDB.DeleteResult;\r\ntype UpdateResult<IdType> = Realm.Services.MongoDB.UpdateResult<IdType>;\r\n\r\n/**\r\n * A remote collection of documents.\r\n */\r\nexport class MongoDBCollection<T extends Document> implements Realm.Services.MongoDB.MongoDBCollection<T> {\r\n  /**\r\n   * The function factory to use when sending requests to the service.\r\n   */\r\n  private functions: Realm.DefaultFunctionsFactory;\r\n\r\n  /**\r\n   * The name of the database.\r\n   */\r\n  private readonly databaseName: string;\r\n\r\n  /**\r\n   * The name of the collection.\r\n   */\r\n  private readonly collectionName: string;\r\n\r\n  private readonly serviceName: string;\r\n  private readonly fetcher: Fetcher;\r\n\r\n  /**\r\n   * Construct a remote collection of documents.\r\n   * @param fetcher The fetcher to use when requesting the service.\r\n   * @param serviceName The name of the remote service.\r\n   * @param databaseName The name of the database.\r\n   * @param collectionName The name of the remote collection.\r\n   */\r\n  constructor(fetcher: Fetcher, serviceName: string, databaseName: string, collectionName: string) {\r\n    this.functions = FunctionsFactory.create(fetcher, {\r\n      serviceName,\r\n    });\r\n    this.databaseName = databaseName;\r\n    this.collectionName = collectionName;\r\n    this.serviceName = serviceName;\r\n    this.fetcher = fetcher;\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  find(filter: Realm.Services.MongoDB.Filter = {}, options: Realm.Services.MongoDB.FindOptions = {}): Promise<T[]> {\r\n    return this.functions.find({\r\n      database: this.databaseName,\r\n      collection: this.collectionName,\r\n      query: filter,\r\n      project: options.projection,\r\n      sort: options.sort,\r\n      limit: options.limit,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  findOne(\r\n    filter: Realm.Services.MongoDB.Filter = {},\r\n    options: Realm.Services.MongoDB.FindOneOptions = {},\r\n  ): Promise<T | null> {\r\n    return this.functions.findOne({\r\n      database: this.databaseName,\r\n      collection: this.collectionName,\r\n      query: filter,\r\n      project: options.projection,\r\n      sort: options.sort,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  findOneAndUpdate(\r\n    filter: Realm.Services.MongoDB.Filter = {},\r\n    update: Realm.Services.MongoDB.Update,\r\n    options: Realm.Services.MongoDB.FindOneAndModifyOptions = {},\r\n  ): Promise<T | null> {\r\n    return this.functions.findOneAndUpdate({\r\n      database: this.databaseName,\r\n      collection: this.collectionName,\r\n      filter,\r\n      update,\r\n      sort: options.sort,\r\n      projection: options.projection,\r\n      upsert: options.upsert,\r\n      returnNewDocument: options.returnNewDocument,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  findOneAndReplace(\r\n    filter: Realm.Services.MongoDB.Filter = {},\r\n    replacement: NewDocument<T>,\r\n    options: Realm.Services.MongoDB.FindOneAndModifyOptions = {},\r\n  ): Promise<T | null> {\r\n    return this.functions.findOneAndReplace({\r\n      database: this.databaseName,\r\n      collection: this.collectionName,\r\n      filter: filter,\r\n      update: replacement,\r\n      sort: options.sort,\r\n      projection: options.projection,\r\n      upsert: options.upsert,\r\n      returnNewDocument: options.returnNewDocument,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  findOneAndDelete(\r\n    filter: Realm.Services.MongoDB.Filter = {},\r\n    options: Realm.Services.MongoDB.FindOneOptions = {},\r\n  ): Promise<T | null> {\r\n    return this.functions.findOneAndReplace({\r\n      database: this.databaseName,\r\n      collection: this.collectionName,\r\n      filter,\r\n      sort: options.sort,\r\n      projection: options.projection,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  aggregate(pipeline: Realm.Services.MongoDB.AggregatePipelineStage[]): Promise<unknown> {\r\n    return this.functions.aggregate({\r\n      database: this.databaseName,\r\n      collection: this.collectionName,\r\n      pipeline,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  count(\r\n    filter: Realm.Services.MongoDB.Filter = {},\r\n    options: Realm.Services.MongoDB.CountOptions = {},\r\n  ): Promise<number> {\r\n    return this.functions.count({\r\n      database: this.databaseName,\r\n      collection: this.collectionName,\r\n      query: filter,\r\n      limit: options.limit,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  insertOne(document: NewDocument<T>): Promise<InsertOneResult<T[\"_id\"]>> {\r\n    return this.functions.insertOne({\r\n      database: this.databaseName,\r\n      collection: this.collectionName,\r\n      document,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  insertMany(documents: NewDocument<T>[]): Promise<InsertManyResult<T[\"_id\"]>> {\r\n    return this.functions.insertMany({\r\n      database: this.databaseName,\r\n      collection: this.collectionName,\r\n      documents,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  deleteOne(filter: Realm.Services.MongoDB.Filter = {}): Promise<DeleteResult> {\r\n    return this.functions.deleteOne({\r\n      database: this.databaseName,\r\n      collection: this.collectionName,\r\n      query: filter,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  deleteMany(filter: Realm.Services.MongoDB.Filter = {}): Promise<DeleteResult> {\r\n    return this.functions.deleteMany({\r\n      database: this.databaseName,\r\n      collection: this.collectionName,\r\n      query: filter,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  updateOne(\r\n    filter: Realm.Services.MongoDB.Filter,\r\n    update: Realm.Services.MongoDB.Update,\r\n    options: Realm.Services.MongoDB.UpdateOptions = {},\r\n  ): Promise<UpdateResult<T[\"_id\"]>> {\r\n    return this.functions.updateOne({\r\n      database: this.databaseName,\r\n      collection: this.collectionName,\r\n      query: filter,\r\n      update,\r\n      upsert: options.upsert,\r\n      arrayFilters: options.arrayFilters,\r\n    });\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  updateMany(\r\n    filter: Realm.Services.MongoDB.Filter,\r\n    update: Realm.Services.MongoDB.Update,\r\n    options: Realm.Services.MongoDB.UpdateOptions = {},\r\n  ): Promise<UpdateResult<T[\"_id\"]>> {\r\n    return this.functions.updateMany({\r\n      database: this.databaseName,\r\n      collection: this.collectionName,\r\n      query: filter,\r\n      update,\r\n      upsert: options.upsert,\r\n      arrayFilters: options.arrayFilters,\r\n    });\r\n  }\r\n\r\n  watch(options: {\r\n    /** List of ids to watch */\r\n    ids: T[\"_id\"][];\r\n    filter: never;\r\n  }): AsyncGenerator<ChangeEvent<T>>;\r\n  watch(options: {\r\n    ids: never;\r\n    /** A filter document */\r\n    filter: Realm.Services.MongoDB.Filter;\r\n  }): AsyncGenerator<ChangeEvent<T>>;\r\n  watch({\r\n    ids,\r\n    filter,\r\n  }: {\r\n    ids?: T[\"_id\"][];\r\n    filter?: Realm.Services.MongoDB.Filter;\r\n  } = {}): AsyncGenerator<ChangeEvent<T>> {\r\n    const iterable = this.functions.callFunctionStreaming(\"watch\", {\r\n      database: this.databaseName,\r\n      collection: this.collectionName,\r\n      ids,\r\n      filter,\r\n    });\r\n    // Unpack the async iterable, making it possible for us to propagate the `return` when this generator is returning\r\n    const iterator = iterable.then((i) => i[Symbol.asyncIterator]());\r\n    const stream = this.watchImpl(iterator);\r\n    // Store the original return on the stream, to enable propagating to the original implementation after we've returned on the iterator\r\n    const originalReturn = stream.return;\r\n    return Object.assign(stream, {\r\n      return(value: unknown) {\r\n        iterator.then((i) => (i.return ? i.return(value) : undefined));\r\n        return originalReturn.call(stream, value);\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param iterator An async iterator of the response body of a watch request.\r\n   * @yields Change events.\r\n   * Note: We had to split this from the `watch` method above to enable manually calling `return` on the response body iterator.\r\n   */\r\n  async *watchImpl(iterator: Promise<AsyncIterator<Uint8Array>>): AsyncGenerator<ChangeEvent<T>> {\r\n    const watchStream = new WatchStream<T>();\r\n    // Repack the iterator into an interable for the `watchImpl` to consume\r\n    const iterable = iterator.then((i) => ({ [Symbol.asyncIterator]: () => i }));\r\n    // Start consuming change events\r\n    for await (const chunk of await iterable) {\r\n      if (!chunk) continue;\r\n      watchStream.feedBuffer(chunk);\r\n      while (watchStream.state == WatchStreamState.HAVE_EVENT) {\r\n        yield watchStream.nextEvent() as ChangeEvent<T>;\r\n      }\r\n      if (watchStream.state == WatchStreamState.HAVE_ERROR)\r\n        // XXX this is just throwing an error like {error_code: \"BadRequest, error: \"message\"},\r\n        // which matches realm-js, but is different from how errors are handled in realm-web\r\n        throw watchStream.error;\r\n    }\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { Fetcher } from \"../../Fetcher\";\r\nimport { MongoDBCollection } from \"./MongoDBCollection\";\r\n\r\n/**\r\n * A remote MongoDB Service enables access to a MongoDB Atlas cluster.\r\n */\r\nexport type MongoDBService = {\r\n  db(name: string): ReturnType<typeof createDatabase>;\r\n};\r\n\r\nexport { MongoDBCollection };\r\n\r\n/**\r\n * Creates an Remote MongoDB Collection.\r\n * Note: This method exists to enable function binding.\r\n * @param fetcher The underlying fetcher.\r\n * @param serviceName A service name.\r\n * @param databaseName A database name.\r\n * @param collectionName A collection name.\r\n * @returns The collection.\r\n */\r\nfunction createCollection<T extends Realm.Services.MongoDB.Document = Realm.Services.MongoDB.Document<unknown>>(\r\n  fetcher: Fetcher,\r\n  serviceName: string,\r\n  databaseName: string,\r\n  collectionName: string,\r\n): MongoDBCollection<T> {\r\n  return new MongoDBCollection<T>(fetcher, serviceName, databaseName, collectionName);\r\n}\r\n\r\n/**\r\n * Creates a Remote MongoDB Database.\r\n * Note: This method exists to enable function binding.\r\n * @param fetcher The underlying fetcher\r\n * @param serviceName A service name\r\n * @param databaseName A database name\r\n * @returns The database.\r\n */\r\nfunction createDatabase(fetcher: Fetcher, serviceName: string, databaseName: string): Realm.Services.MongoDBDatabase {\r\n  return {\r\n    collection: createCollection.bind(\r\n      null,\r\n      fetcher,\r\n      serviceName,\r\n      databaseName,\r\n    ) as Realm.Services.MongoDBDatabase[\"collection\"],\r\n  };\r\n}\r\n\r\n/**\r\n * Creates a Remote MongoDB Service.\r\n * Note: This method exists to enable function binding.\r\n * @param fetcher The underlying fetcher.\r\n * @param serviceName An optional service name.\r\n * @returns The service.\r\n */\r\nexport function createService(fetcher: Fetcher, serviceName = \"mongo-db\"): MongoDBService {\r\n  return { db: createDatabase.bind(null, fetcher, serviceName) };\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\n// We're using a dependency to decode Base64 to UTF-8, because of https://stackoverflow.com/a/30106551/503899\r\nimport { Base64 } from \"js-base64\";\r\n\r\nimport type { App } from \"./App\";\r\nimport { Fetcher } from \"./Fetcher\";\r\nimport { UserProfile } from \"./UserProfile\";\r\nimport { UserStorage } from \"./UserStorage\";\r\nimport { FunctionsFactory } from \"./FunctionsFactory\";\r\nimport { Credentials, ProviderType } from \"./Credentials\";\r\nimport { ApiKeyAuth } from \"./auth-providers\";\r\nimport { createService as createMongoDBRemoteService } from \"./services/MongoDBService\";\r\nimport routes from \"./routes\";\r\n\r\nconst DEFAULT_DEVICE_ID = \"000000000000000000000000\";\r\n\r\ntype SimpleObject = Record<string, unknown>;\r\n\r\ninterface HydratableUserParameters {\r\n  app: App;\r\n  id: string;\r\n}\r\n\r\ninterface UserParameters {\r\n  app: App;\r\n  id: string;\r\n  providerType: ProviderType;\r\n  accessToken: string;\r\n  refreshToken: string;\r\n}\r\n\r\ntype JWT<CustomDataType = SimpleObject> = {\r\n  expires: number;\r\n  issuedAt: number;\r\n  subject: string;\r\n  userData: CustomDataType;\r\n};\r\n\r\n/** The state of a user within the app */\r\nexport enum UserState {\r\n  /** Active, with both access and refresh tokens */\r\n  Active = \"active\",\r\n  /** Logged out, but there might still be data persisted about the user, in the browser. */\r\n  LoggedOut = \"logged-out\",\r\n  /** Logged out and all data about the user has been removed. */\r\n  Removed = \"removed\",\r\n}\r\n\r\n/** The type of a user. */\r\nexport enum UserType {\r\n  /** Created by the user itself. */\r\n  Normal = \"normal\",\r\n  /** Created by an administrator of the app. */\r\n  Server = \"server\",\r\n}\r\n\r\n/**\r\n * Representation of an authenticated user of an app.\r\n */\r\nexport class User<\r\n  FunctionsFactoryType = Realm.DefaultFunctionsFactory,\r\n  CustomDataType = SimpleObject,\r\n  UserProfileDataType = Realm.DefaultUserProfileData,\r\n> implements Realm.User<FunctionsFactoryType, CustomDataType, UserProfileDataType>\r\n{\r\n  /**\r\n   * The app that this user is associated with.\r\n   */\r\n  public readonly app: App<FunctionsFactoryType, CustomDataType>;\r\n\r\n  /** @inheritdoc */\r\n  public readonly id: string;\r\n\r\n  /** @inheritdoc */\r\n  public readonly functions: FunctionsFactoryType & Realm.BaseFunctionsFactory;\r\n\r\n  /** @inheritdoc */\r\n  public readonly providerType: ProviderType;\r\n\r\n  /** @inheritdoc */\r\n  public readonly apiKeys: ApiKeyAuth;\r\n\r\n  private _accessToken: string | null;\r\n  private _refreshToken: string | null;\r\n  private _profile: UserProfile<UserProfileDataType> | undefined;\r\n  private fetcher: Fetcher;\r\n  private storage: UserStorage<UserProfileDataType>;\r\n\r\n  /**\r\n   * @param parameters Parameters of the user.\r\n   */\r\n  public constructor(parameters: HydratableUserParameters);\r\n  /**\r\n   * @param parameters Parameters of the user.\r\n   */\r\n  public constructor(parameters: UserParameters);\r\n  /**\r\n   * @param parameters Parameters of the user.\r\n   */\r\n  public constructor(parameters: HydratableUserParameters | UserParameters) {\r\n    this.app = parameters.app as App<unknown, unknown> as App<FunctionsFactoryType, CustomDataType>;\r\n    this.id = parameters.id;\r\n    this.storage = new UserStorage(this.app.storage, this.id);\r\n    if (\"accessToken\" in parameters && \"refreshToken\" in parameters && \"providerType\" in parameters) {\r\n      this._accessToken = parameters.accessToken;\r\n      this._refreshToken = parameters.refreshToken;\r\n      this.providerType = parameters.providerType;\r\n      // Save the parameters to storage, for future instances to be hydrated from\r\n      this.storage.accessToken = parameters.accessToken;\r\n      this.storage.refreshToken = parameters.refreshToken;\r\n      this.storage.providerType = parameters.providerType;\r\n    } else {\r\n      // Hydrate the rest of the parameters from storage\r\n      this._accessToken = this.storage.accessToken;\r\n      this._refreshToken = this.storage.refreshToken;\r\n      const providerType = this.storage.providerType;\r\n      this._profile = this.storage.profile;\r\n      if (providerType) {\r\n        this.providerType = providerType;\r\n      } else {\r\n        throw new Error(\"Storage is missing a provider type\");\r\n      }\r\n    }\r\n    this.fetcher = this.app.fetcher.clone({\r\n      userContext: { currentUser: this as unknown as User },\r\n    });\r\n    this.apiKeys = new ApiKeyAuth(this.fetcher);\r\n    this.functions = FunctionsFactory.create(this.fetcher) as FunctionsFactoryType & Realm.BaseFunctionsFactory;\r\n  }\r\n\r\n  /**\r\n   * @returns The access token used to authenticate the user towards Atlas App Services.\r\n   */\r\n  get accessToken(): string | null {\r\n    return this._accessToken;\r\n  }\r\n\r\n  /**\r\n   * @param token The new access token.\r\n   */\r\n  set accessToken(token: string | null) {\r\n    this._accessToken = token;\r\n    this.storage.accessToken = token;\r\n  }\r\n\r\n  /**\r\n   * @returns The refresh token used to issue new access tokens.\r\n   */\r\n  get refreshToken(): string | null {\r\n    return this._refreshToken;\r\n  }\r\n\r\n  /**\r\n   * @param token The new refresh token.\r\n   */\r\n  set refreshToken(token: string | null) {\r\n    this._refreshToken = token;\r\n    this.storage.refreshToken = token;\r\n  }\r\n\r\n  /**\r\n   * @returns The current state of the user.\r\n   */\r\n  get state(): UserState {\r\n    if (this.id in this.app.allUsers) {\r\n      return this.refreshToken === null ? UserState.LoggedOut : UserState.Active;\r\n    } else {\r\n      return UserState.Removed;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns The logged in state of the user.\r\n   */\r\n  get isLoggedIn(): boolean {\r\n    return this.state === UserState.Active;\r\n  }\r\n\r\n  get customData(): CustomDataType {\r\n    if (this.accessToken) {\r\n      const decodedToken = this.decodeAccessToken();\r\n      return decodedToken.userData;\r\n    } else {\r\n      throw new Error(\"Cannot read custom data without an access token\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @returns Profile containing detailed information about the user.\r\n   */\r\n  get profile(): UserProfileDataType {\r\n    if (this._profile) {\r\n      return this._profile.data;\r\n    } else {\r\n      throw new Error(\"A profile was never fetched for this user\");\r\n    }\r\n  }\r\n\r\n  get identities(): Realm.UserIdentity[] {\r\n    if (this._profile) {\r\n      return this._profile.identities;\r\n    } else {\r\n      throw new Error(\"A profile was never fetched for this user\");\r\n    }\r\n  }\r\n\r\n  get deviceId(): string | null {\r\n    if (this.accessToken) {\r\n      const payload = this.accessToken.split(\".\")[1];\r\n      if (payload) {\r\n        const parsedPayload = JSON.parse(Base64.decode(payload));\r\n        const deviceId = parsedPayload[\"baas_device_id\"];\r\n        if (typeof deviceId === \"string\" && deviceId !== DEFAULT_DEVICE_ID) {\r\n          return deviceId;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Refresh the users profile data.\r\n   */\r\n  public async refreshProfile(): Promise<void> {\r\n    // Fetch the latest profile\r\n    const response = await this.fetcher.fetchJSON({\r\n      method: \"GET\",\r\n      path: routes.api().auth().profile().path,\r\n    });\r\n    // Create a profile instance\r\n    this._profile = new UserProfile(response);\r\n    // Store this for later hydration\r\n    this.storage.profile = this._profile;\r\n  }\r\n\r\n  /**\r\n   * Log out the user, invalidating the session (and its refresh token).\r\n   */\r\n  public async logOut(): Promise<void> {\r\n    // Invalidate the refresh token\r\n    try {\r\n      if (this._refreshToken !== null) {\r\n        await this.fetcher.fetchJSON({\r\n          method: \"DELETE\",\r\n          path: routes.api().auth().session().path,\r\n          tokenType: \"refresh\",\r\n        });\r\n      }\r\n    } catch (err) {\r\n      // Ignore failing to delete a missing refresh token\r\n      // It might have expired or it might be gone due to the user being deleted\r\n      if (!(err instanceof Error) || !err.message.includes(\"failed to find refresh token\")) {\r\n        throw err;\r\n      }\r\n    } finally {\r\n      // Forget the access and refresh token\r\n      this.accessToken = null;\r\n      this.refreshToken = null;\r\n    }\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public async linkCredentials(credentials: Credentials): Promise<void> {\r\n    const response = await this.app.authenticator.authenticate(credentials, this as unknown as User);\r\n    // Sanity check the response\r\n    if (this.id !== response.userId) {\r\n      const details = `got user id ${response.userId} expected ${this.id}`;\r\n      throw new Error(`Link response ment for another user (${details})`);\r\n    }\r\n    // Update the access token\r\n    this.accessToken = response.accessToken;\r\n    // Refresh the profile to include the new identity\r\n    await this.refreshProfile();\r\n  }\r\n\r\n  /**\r\n   * Request a new access token, using the refresh token.\r\n   */\r\n  public async refreshAccessToken(): Promise<void> {\r\n    const response = await this.fetcher.fetchJSON({\r\n      method: \"POST\",\r\n      path: routes.api().auth().session().path,\r\n      tokenType: \"refresh\",\r\n    });\r\n    const { access_token: accessToken } = response as Record<string, unknown>;\r\n    if (typeof accessToken === \"string\") {\r\n      this.accessToken = accessToken;\r\n    } else {\r\n      throw new Error(\"Expected an 'access_token' in the response\");\r\n    }\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public async refreshCustomData(): Promise<CustomDataType> {\r\n    await this.refreshAccessToken();\r\n    return this.customData;\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc\r\n   */\r\n  public addListener(): void {\r\n    throw new Error(\"Not yet implemented\");\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc\r\n   */\r\n  public removeListener(): void {\r\n    throw new Error(\"Not yet implemented\");\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc\r\n   */\r\n  public removeAllListeners(): void {\r\n    throw new Error(\"Not yet implemented\");\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public callFunction<ReturnType = unknown>(name: string, ...args: unknown[]): Promise<ReturnType> {\r\n    return this.functions.callFunction(name, ...args);\r\n  }\r\n\r\n  /**\r\n   * @returns A plain ol' JavaScript object representation of the user.\r\n   */\r\n  public toJSON(): Record<string, unknown> {\r\n    return {\r\n      id: this.id,\r\n      accessToken: this.accessToken,\r\n      refreshToken: this.refreshToken,\r\n      profile: this._profile,\r\n      state: this.state,\r\n      customData: this.customData,\r\n    };\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  push(): Realm.Services.Push {\r\n    throw new Error(\"Not yet implemented\");\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public mongoClient(serviceName: string): Realm.Services.MongoDB {\r\n    return createMongoDBRemoteService(this.fetcher, serviceName);\r\n  }\r\n\r\n  private decodeAccessToken(): JWT<CustomDataType> {\r\n    if (this.accessToken) {\r\n      // Decode and spread the token\r\n      const parts = this.accessToken.split(\".\");\r\n      if (parts.length !== 3) {\r\n        throw new Error(\"Expected an access token with three parts\");\r\n      }\r\n      // Decode the payload\r\n      const encodedPayload = parts[1];\r\n      const decodedPayload = Base64.decode(encodedPayload);\r\n      const parsedPayload = JSON.parse(decodedPayload);\r\n      const { exp: expires, iat: issuedAt, sub: subject, user_data: userData = {} } = parsedPayload;\r\n      // Validate the types\r\n      if (typeof expires !== \"number\") {\r\n        throw new Error(\"Failed to decode access token 'exp'\");\r\n      } else if (typeof issuedAt !== \"number\") {\r\n        throw new Error(\"Failed to decode access token 'iat'\");\r\n      }\r\n      return { expires, issuedAt, subject, userData };\r\n    } else {\r\n      throw new Error(\"Missing an access token\");\r\n    }\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\ntype AnonymousPayload = Realm.Credentials.AnonymousPayload;\r\ntype ApiKeyPayload = Realm.Credentials.ApiKeyPayload;\r\ntype EmailPasswordPayload = Realm.Credentials.EmailPasswordPayload;\r\ntype OAuth2RedirectPayload = Realm.Credentials.OAuth2RedirectPayload;\r\ntype GoogleAuthCodePayload = Realm.Credentials.GoogleAuthCodePayload;\r\ntype GooglePayload = Realm.Credentials.GooglePayload;\r\ntype FacebookPayload = Realm.Credentials.FacebookPayload;\r\ntype FunctionPayload = Realm.Credentials.FunctionPayload;\r\ntype JWTPayload = Realm.Credentials.JWTPayload;\r\ntype ApplePayload = Realm.Credentials.ApplePayload;\r\n\r\ntype GoogleOptions = OAuth2RedirectPayload | GoogleAuthCodePayload | { idToken: string };\r\n\r\n/**\r\n * Types of an authentication provider.\r\n */\r\nexport type ProviderType =\r\n  | \"anon-user\"\r\n  | \"api-key\"\r\n  | \"local-userpass\"\r\n  | \"custom-function\"\r\n  | \"custom-token\"\r\n  | \"oauth2-google\"\r\n  | \"oauth2-facebook\"\r\n  | \"oauth2-apple\";\r\n\r\ntype SimpleObject = Record<string, unknown>;\r\n\r\n// TODO: Ensure the static interface of the Credentials class implements the static interface of Realm.Credentials\r\n// See https://stackoverflow.com/a/43484801\r\n\r\n/**\r\n * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.\r\n */\r\nexport class Credentials<PayloadType extends SimpleObject = SimpleObject> implements Realm.Credentials<PayloadType> {\r\n  /**\r\n   * Creates credentials that logs in using the [Anonymous Provider](https://docs.mongodb.com/realm/authentication/anonymous/).\r\n   * @param reuse - Reuse any existing anonymous user already logged in.\r\n   * @returns The credentials instance, which can be passed to `app.logIn`.\r\n   */\r\n  static anonymous(reuse = true): Credentials<AnonymousPayload> {\r\n    return new Credentials<AnonymousPayload>(\"anon-user\", \"anon-user\", reuse, {});\r\n  }\r\n\r\n  /**\r\n   * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).\r\n   * @param key The secret content of the API key.\r\n   * @returns The credentials instance, which can be passed to `app.logIn`.\r\n   */\r\n  static apiKey(key: string): Credentials<ApiKeyPayload> {\r\n    return new Credentials<ApiKeyPayload>(\"api-key\", \"api-key\", false, { key });\r\n  }\r\n\r\n  /**\r\n   * Creates credentials that logs in using the [Email/Password Provider](https://docs.mongodb.com/realm/authentication/email-password/).\r\n   * Note: This was formerly known as the \"Username/Password\" provider.\r\n   * @param email The end-users email address.\r\n   * @param password The end-users password.\r\n   * @returns The credentials instance, which can be passed to `app.logIn`.\r\n   */\r\n  static emailPassword(email: string, password: string): Credentials<EmailPasswordPayload> {\r\n    return new Credentials<EmailPasswordPayload>(\"local-userpass\", \"local-userpass\", false, {\r\n      username: email,\r\n      password,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates credentials that logs in using the [Custom Function Provider](https://docs.mongodb.com/realm/authentication/custom-function/).\r\n   * @param payload The custom payload as expected by the server.\r\n   * @returns The credentials instance, which can be passed to `app.logIn`.\r\n   */\r\n  static function<PayloadType extends FunctionPayload = FunctionPayload>(\r\n    payload: PayloadType,\r\n  ): Credentials<PayloadType> {\r\n    return new Credentials<PayloadType>(\"custom-function\", \"custom-function\", false, payload);\r\n  }\r\n\r\n  /**\r\n   * Creates credentials that logs in using the [Custom JWT Provider](https://docs.mongodb.com/realm/authentication/custom-jwt/).\r\n   * @param token The JSON Web Token (JWT).\r\n   * @returns The credentials instance, which can be passed to `app.logIn`.\r\n   */\r\n  static jwt(token: string): Credentials<JWTPayload> {\r\n    return new Credentials<JWTPayload>(\"custom-token\", \"custom-token\", false, {\r\n      token,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Creates credentials that logs in using the [Google Provider](https://docs.mongodb.com/realm/authentication/google/).\r\n   * @param payload The URL that users should be redirected to, the auth code or id token from Google.\r\n   * @returns The credentials instance, which can be passed to `app.logIn`.\r\n   */\r\n  static google<P extends OAuth2RedirectPayload | GooglePayload>(payload: GoogleOptions): Credentials<P> {\r\n    return new Credentials<P>(\"oauth2-google\", \"oauth2-google\", false, Credentials.derivePayload(payload) as P);\r\n  }\r\n\r\n  /**\r\n   * @param payload The payload string.\r\n   * @returns A payload object based on the string.\r\n   */\r\n  private static derivePayload(payload: GoogleOptions): SimpleObject {\r\n    if (typeof payload === \"string\") {\r\n      throw new Error(\"`google(<tokenString>)` has been deprecated.  Please use `google(<authCodeObject>).\");\r\n    } else if (Object.keys(payload).length === 1) {\r\n      if (\"authCode\" in payload || \"redirectUrl\" in payload) {\r\n        return payload;\r\n      } else if (\"idToken\" in payload) {\r\n        return { id_token: payload.idToken };\r\n      } else {\r\n        throw new Error(\"Unexpected payload: \" + JSON.stringify(payload));\r\n      }\r\n    } else {\r\n      throw new Error(\"Expected only one property in payload, got \" + JSON.stringify(payload));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates credentials that logs in using the [Facebook Provider](https://docs.mongodb.com/realm/authentication/facebook/).\r\n   * @param redirectUrlOrAccessToken The URL that users should be redirected to or the auth code returned from Facebook.\r\n   * @returns The credentials instance, which can be passed to `app.logIn`.\r\n   */\r\n  static facebook<PayloadType extends OAuth2RedirectPayload | FacebookPayload>(\r\n    redirectUrlOrAccessToken: string,\r\n  ): Credentials<PayloadType> {\r\n    return new Credentials<PayloadType>(\r\n      \"oauth2-facebook\",\r\n      \"oauth2-facebook\",\r\n      false,\r\n      redirectUrlOrAccessToken.includes(\"://\")\r\n        ? { redirectUrl: redirectUrlOrAccessToken }\r\n        : { accessToken: redirectUrlOrAccessToken },\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Creates credentials that logs in using the [Apple ID Provider](https://docs.mongodb.com/realm/authentication/apple/).\r\n   * @param redirectUrlOrIdToken The URL that users should be redirected to or the id_token returned from Apple.\r\n   * @returns The credentials instance, which can be passed to `app.logIn`.\r\n   */\r\n  static apple<PayloadType extends OAuth2RedirectPayload | ApplePayload>(\r\n    redirectUrlOrIdToken: string,\r\n  ): Credentials<PayloadType> {\r\n    return new Credentials<PayloadType>(\r\n      \"oauth2-apple\",\r\n      \"oauth2-apple\",\r\n      false,\r\n      redirectUrlOrIdToken.includes(\"://\") ? { redirectUrl: redirectUrlOrIdToken } : { id_token: redirectUrlOrIdToken },\r\n    );\r\n  }\r\n\r\n  /**\r\n   * The name of the authentication provider used when authenticating.\r\n   * Note: This is the same as the type for all current authentication providers in the service and mainly required for forwards-compatibility.\r\n   */\r\n  public readonly providerName: string;\r\n\r\n  /**\r\n   * The type of the authentication provider used when authenticating.\r\n   */\r\n  public readonly providerType: ProviderType;\r\n\r\n  /**\r\n   * Reuse any user already authenticated with this provider.\r\n   */\r\n  public readonly reuse: boolean;\r\n\r\n  /**\r\n   * The data being sent to the service when authenticating.\r\n   */\r\n  public readonly payload: PayloadType;\r\n\r\n  constructor(name: string, type: \"anon-user\", reuse: boolean, payload: AnonymousPayload);\r\n  constructor(name: string, type: \"api-key\", reuse: false, payload: ApiKeyPayload);\r\n  constructor(name: string, type: \"local-userpass\", reuse: false, payload: EmailPasswordPayload);\r\n  constructor(name: string, type: \"custom-function\", reuse: false, payload: FunctionPayload);\r\n  constructor(name: string, type: \"custom-token\", reuse: false, payload: JWTPayload);\r\n  constructor(name: string, type: \"oauth2-google\", reuse: false, payload: OAuth2RedirectPayload | GooglePayload);\r\n  constructor(name: string, type: \"oauth2-facebook\", reuse: false, payload: OAuth2RedirectPayload | FacebookPayload);\r\n  constructor(name: string, type: \"oauth2-apple\", reuse: false, payload: OAuth2RedirectPayload | ApplePayload);\r\n\r\n  /**\r\n   * Constructs an instance of credentials.\r\n   * @param providerName The name of the authentication provider used when authenticating.\r\n   * @param providerType The type of the authentication provider used when authenticating.\r\n   * @param reuse Reuse any user already authenticated with this provider.\r\n   * @param payload The data being sent to the service when authenticating.\r\n   */\r\n  constructor(providerName: string, providerType: ProviderType, reuse: boolean, payload: PayloadType) {\r\n    this.providerName = providerName;\r\n    this.providerType = providerType;\r\n    this.reuse = reuse;\r\n    this.payload = payload;\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { PrefixedStorage, Storage } from \"./storage\";\r\n\r\nconst USER_IDS_STORAGE_KEY = \"userIds\";\r\nconst DEVICE_ID_STORAGE_KEY = \"deviceId\";\r\n\r\n/**\r\n * Storage specific to the app.\r\n */\r\nexport class AppStorage extends PrefixedStorage {\r\n  /**\r\n   * @param storage The underlying storage to wrap.\r\n   * @param appId The id of the app.\r\n   */\r\n  constructor(storage: Storage, appId: string) {\r\n    super(storage, `app(${appId})`);\r\n  }\r\n\r\n  /**\r\n   * Reads out the list of user ids from storage.\r\n   * @returns A list of user ids.\r\n   */\r\n  public getUserIds(): string[] {\r\n    const userIdsString = this.get(USER_IDS_STORAGE_KEY);\r\n    const userIds = userIdsString ? JSON.parse(userIdsString) : [];\r\n    if (Array.isArray(userIds)) {\r\n      // Remove any duplicates that might have been added\r\n      // The Set preserves insertion order\r\n      return [...new Set(userIds)];\r\n    } else {\r\n      throw new Error(\"Expected the user ids to be an array\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the list of ids in storage.\r\n   * Optionally merging with existing ids stored in the storage, by prepending these while voiding duplicates.\r\n   * @param userIds The list of ids to store.\r\n   * @param mergeWithExisting Prepend existing ids to avoid data-races with other apps using this storage.\r\n   */\r\n  public setUserIds(userIds: string[], mergeWithExisting: boolean): void {\r\n    if (mergeWithExisting) {\r\n      // Add any existing user id to the end of this list, avoiding duplicates\r\n      const existingIds = this.getUserIds();\r\n      for (const id of existingIds) {\r\n        if (userIds.indexOf(id) === -1) {\r\n          userIds.push(id);\r\n        }\r\n      }\r\n    }\r\n    // Store the list of ids\r\n    this.set(USER_IDS_STORAGE_KEY, JSON.stringify(userIds));\r\n  }\r\n\r\n  /**\r\n   * Remove an id from the list of ids.\r\n   * @param userId The id of a User to be removed.\r\n   */\r\n  public removeUserId(userId: string): void {\r\n    const existingIds = this.getUserIds();\r\n    const userIds = existingIds.filter((id) => id !== userId);\r\n    // Store the list of ids\r\n    this.setUserIds(userIds, false);\r\n  }\r\n\r\n  /**\r\n   * @returns id of this device (if any exists)\r\n   */\r\n  public getDeviceId(): string | null {\r\n    return this.get(DEVICE_ID_STORAGE_KEY);\r\n  }\r\n\r\n  /**\r\n   * @param deviceId The id of this device, to send on subsequent authentication requests.\r\n   */\r\n  public setDeviceId(deviceId: string): void {\r\n    this.set(DEVICE_ID_STORAGE_KEY, deviceId);\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nconst LOWERCASE_LETTERS = \"abcdefghijklmnopqrstuvwxyz\";\r\n\r\nimport { Storage } from \"./storage\";\r\nimport { generateRandomString, decodeQueryString } from \"./utils/string\";\r\nimport { getEnvironment } from \"./environment\";\r\n\r\nconst CLOSE_CHECK_INTERVAL = 100; // 10 times per second\r\n\r\n/**\r\n * Simplified handle to a browser window.\r\n */\r\nexport type Window = {\r\n  /**\r\n   * Attempt to close the window.\r\n   */\r\n  close: () => void;\r\n\r\n  /**\r\n   * Has the window been closed?\r\n   */\r\n  closed: boolean;\r\n};\r\n\r\ntype WindowOpener = (url: string) => Window | null;\r\n\r\ntype RedirectResult = {\r\n  /**\r\n   * The id of the Atlas App Services application.\r\n   */\r\n  appId: string;\r\n\r\n  /**\r\n   * The pseudo-random state which is passed through the OAuth flow.\r\n   */\r\n  state?: string;\r\n\r\n  /**\r\n   * Any error that has occurred.\r\n   */\r\n  error?: string;\r\n\r\n  /**\r\n   * The serialized combined value containing ids and tokens.\r\n   */\r\n  userAuth?: string;\r\n\r\n  /**\r\n   * Was this originally a request to link a user with other credentials?\r\n   */\r\n  link?: string;\r\n};\r\n\r\nconst REDIRECT_HASH_TO_RESULT: { [k: string]: keyof RedirectResult } = {\r\n  _baas_client_app_id: \"appId\",\r\n  _baas_ua: \"userAuth\",\r\n  _baas_link: \"link\",\r\n  _baas_error: \"error\",\r\n  _baas_state: \"state\",\r\n};\r\n\r\n/**\r\n * A collection of methods helping implement the OAuth2 flow.\r\n */\r\nexport class OAuth2Helper {\r\n  /**\r\n   * Parses the query string from the final step of the OAuth flow.\r\n   * @param queryString The query string passed through in location.hash.\r\n   * @returns The result of the OAuth flow.\r\n   */\r\n  public static parseRedirectLocation(queryString: string): RedirectResult {\r\n    const params = decodeQueryString(queryString);\r\n    const result: Partial<RedirectResult> = {};\r\n    for (const [p, r] of Object.entries(REDIRECT_HASH_TO_RESULT)) {\r\n      const value = params[p];\r\n      if (value) {\r\n        result[r] = value;\r\n      }\r\n    }\r\n    return result as RedirectResult;\r\n  }\r\n\r\n  /**\r\n   * Handle the redirect querystring by parsing it and storing it for others to consume.\r\n   * @param queryString The query string containing the encoded result from the OAuth provider.\r\n   * @param storage The underlying storage used to persist the result.\r\n   */\r\n  public static handleRedirect(queryString: string, storage = getEnvironment().defaultStorage): void {\r\n    const result = OAuth2Helper.parseRedirectLocation(queryString);\r\n    const { state, error } = result;\r\n    if (typeof state === \"string\") {\r\n      const oauth2Storage = storage.prefix(\"oauth2\");\r\n      const stateStorage = OAuth2Helper.getStateStorage(oauth2Storage, state);\r\n      stateStorage.set(\"result\", JSON.stringify(result));\r\n    } else if (error) {\r\n      throw new Error(`Failed to handle OAuth 2.0 redirect: ${error}`);\r\n    } else {\r\n      throw new Error(\"Failed to handle OAuth 2.0 redirect.\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Decodes the authInfo string into its seperate parts.\r\n   * @param authInfo An authInfo string returned from the server.\r\n   * @returns An object containing the separate parts of the authInfo string.\r\n   */\r\n  public static decodeAuthInfo(authInfo: string | undefined): Record<string, unknown> {\r\n    const parts = (authInfo || \"\").split(\"$\");\r\n    if (parts.length === 4) {\r\n      const [accessToken, refreshToken, userId, deviceId] = parts;\r\n      return { accessToken, refreshToken, userId, deviceId };\r\n    } else {\r\n      throw new Error(\"Failed to decode 'authInfo' into ids and tokens\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the storage key associated of an secret associated with a state.\r\n   * @param storage The root storage used to derive a \"state namespaced\" storage.\r\n   * @param state The random state.\r\n   * @returns The storage associated with a particular state.\r\n   */\r\n  private static getStateStorage(storage: Storage, state: string) {\r\n    return storage.prefix(`state(${state})`);\r\n  }\r\n\r\n  /**\r\n   * The storage used when storing and retriving secrets.\r\n   */\r\n  private storage: Storage;\r\n\r\n  /**\r\n   * The function called to open a window.\r\n   */\r\n  private openWindow: WindowOpener;\r\n\r\n  /**\r\n   * @param storage The underlying storage to use when storing and retriving secrets.\r\n   * @param openWindow An optional function called when a browser window needs to open.\r\n   */\r\n  constructor(storage: Storage, openWindow = getEnvironment().openWindow) {\r\n    this.storage = storage.prefix(\"oauth2\");\r\n    this.openWindow = openWindow;\r\n  }\r\n\r\n  /**\r\n   * Open a window and wait for the redirect to be handled.\r\n   * @param url The URL to open.\r\n   * @param state The state which will be used to listen for storage updates.\r\n   * @returns The result passed through the redirect.\r\n   */\r\n  public openWindowAndWaitForRedirect(url: string, state: string): Promise<RedirectResult> {\r\n    const stateStorage = OAuth2Helper.getStateStorage(this.storage, state);\r\n    // Return a promise that resolves when the  gets known\r\n    return new Promise((resolve, reject) => {\r\n      let redirectWindow: Window | null = null;\r\n      // We're declaring the interval now to enable referencing before its initialized\r\n      let windowClosedInterval: TimerHandle; // eslint-disable-line prefer-const\r\n\r\n      const handleStorageUpdate = () => {\r\n        // Trying to get the secret from storage\r\n        const result = stateStorage.get(\"result\");\r\n        if (result) {\r\n          const parsedResult = JSON.parse(result);\r\n          // The secret got updated!\r\n          stateStorage.removeListener(handleStorageUpdate);\r\n          // Clear the storage to prevent others from reading this\r\n          stateStorage.clear();\r\n          // Try closing the newly created window\r\n          try {\r\n            if (redirectWindow) {\r\n              // Stop checking if the window closed\r\n              clearInterval(windowClosedInterval);\r\n              redirectWindow.close();\r\n            }\r\n          } catch (err) {\r\n            console.warn(`Failed closing redirect window: ${err}`);\r\n          } finally {\r\n            resolve(parsedResult);\r\n          }\r\n        }\r\n      };\r\n\r\n      // Add a listener to the state storage, awaiting an update to the secret\r\n      stateStorage.addListener(handleStorageUpdate);\r\n      // Open up a window\r\n      redirectWindow = this.openWindow(url);\r\n      // Not using a const, because we need the two listeners to reference each other when removing the other.\r\n      windowClosedInterval = setInterval(() => {\r\n        // Polling \"closed\" because registering listeners on the window violates cross-origin policies\r\n        if (!redirectWindow) {\r\n          // No need to keep polling for a window that we can't check\r\n          clearInterval(windowClosedInterval);\r\n        } else if (redirectWindow.closed) {\r\n          // Stop polling the window state\r\n          clearInterval(windowClosedInterval);\r\n          // Stop listening for changes to the storage\r\n          stateStorage.removeListener(handleStorageUpdate);\r\n          // Reject the promise\r\n          const err = new Error(\"Window closed\");\r\n          reject(err);\r\n        }\r\n      }, CLOSE_CHECK_INTERVAL);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Generate a random state string.\r\n   * @returns The random state string.\r\n   */\r\n  public generateState(): string {\r\n    return generateRandomString(12, LOWERCASE_LETTERS);\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { Fetcher } from \"./Fetcher\";\r\nimport { Storage } from \"./storage\";\r\nimport { OAuth2Helper } from \"./OAuth2Helper\";\r\nimport { encodeQueryString, QueryParams } from \"./utils/string\";\r\nimport { DeviceInformation } from \"./DeviceInformation\";\r\nimport { User } from \"./User\";\r\n\r\nconst REDIRECT_LOCATION_HEADER = \"x-baas-location\";\r\n\r\n// TODO: Add the deviceId to the auth response.\r\n\r\n/**\r\n * The response from an authentication request.\r\n */\r\nexport type AuthResponse = {\r\n  /**\r\n   * The id of the user.\r\n   */\r\n  userId: string;\r\n  /**\r\n   * The short-living access token.\r\n   */\r\n  accessToken: string;\r\n  /**\r\n   * The refresh token for the session.\r\n   */\r\n  refreshToken: string | null;\r\n  /**\r\n   * The id of the device recognized by the server.\r\n   */\r\n  deviceId: string;\r\n};\r\n\r\ntype DeviceInformationGetter = () => DeviceInformation;\r\n\r\n/**\r\n * Handles authentication and linking of users.\r\n */\r\nexport class Authenticator {\r\n  private readonly fetcher: Fetcher;\r\n  private readonly oauth2: OAuth2Helper;\r\n  private readonly getDeviceInformation: DeviceInformationGetter;\r\n\r\n  /**\r\n   * @param fetcher The fetcher used to fetch responses from the server.\r\n   * @param storage The storage used when completing OAuth 2.0 flows (should not be scoped to a specific app).\r\n   * @param getDeviceInformation Called to get device information to be sent to the server.\r\n   */\r\n  constructor(fetcher: Fetcher, storage: Storage, getDeviceInformation: DeviceInformationGetter) {\r\n    this.fetcher = fetcher;\r\n    this.oauth2 = new OAuth2Helper(storage);\r\n    this.getDeviceInformation = getDeviceInformation;\r\n  }\r\n\r\n  /**\r\n   * @param credentials Credentials to use when logging in.\r\n   * @param linkingUser A user requesting to link.\r\n   * @returns A promise resolving to the response from the server.\r\n   */\r\n  public async authenticate(credentials: Realm.Credentials, linkingUser?: User): Promise<AuthResponse> {\r\n    const deviceInformation = this.getDeviceInformation();\r\n    const isLinking = typeof linkingUser === \"object\";\r\n    if (credentials.providerType.startsWith(\"oauth2\") && typeof credentials.payload.redirectUrl === \"string\") {\r\n      // Initiate the OAuth2 flow by generating a state and fetch a redirect URL\r\n      const state = this.oauth2.generateState();\r\n      const url = await this.getLogInUrl(credentials, isLinking, {\r\n        state,\r\n        redirect: credentials.payload.redirectUrl,\r\n        // Ensure redirects are communicated in a header different from \"Location\" and status remains 200 OK\r\n        providerRedirectHeader: isLinking ? true : undefined,\r\n        // Add the device information, only if we're not linking - since that request won't have a body of its own.\r\n        device: !isLinking ? deviceInformation.encode() : undefined,\r\n      });\r\n\r\n      // If we're linking, we need to send the users access token in the request\r\n      if (isLinking) {\r\n        const response = await this.fetcher.fetch({\r\n          method: \"GET\",\r\n          url,\r\n          tokenType: isLinking ? \"access\" : \"none\",\r\n          user: linkingUser,\r\n          // The response will set a cookie that we need to tell the browser to store\r\n          mode: \"cors\",\r\n          credentials: \"include\",\r\n        });\r\n        // If a response header contains a redirect URL: Open a window and wait for the redirect to be handled\r\n        const redirectUrl = response.headers.get(REDIRECT_LOCATION_HEADER);\r\n        if (redirectUrl) {\r\n          return this.openWindowAndWaitForAuthResponse(redirectUrl, state);\r\n        } else {\r\n          throw new Error(`Missing ${REDIRECT_LOCATION_HEADER} header`);\r\n        }\r\n      } else {\r\n        // Otherwise we can open a window and let the server redirect the user right away\r\n        // This gives lower latency (as we don't need the client to receive and execute the redirect in code)\r\n        // This also has less dependency on cookies and doesn't sent any tokens.\r\n        return this.openWindowAndWaitForAuthResponse(url, state);\r\n      }\r\n    } else {\r\n      const logInUrl = await this.getLogInUrl(credentials, isLinking);\r\n      const response = await this.fetcher.fetchJSON({\r\n        method: \"POST\",\r\n        url: logInUrl,\r\n        body: {\r\n          ...credentials.payload,\r\n          options: {\r\n            device: deviceInformation.toJSON(),\r\n          },\r\n        },\r\n        tokenType: isLinking ? \"access\" : \"none\",\r\n        user: linkingUser,\r\n      });\r\n      // Spread out values from the response and ensure they're valid\r\n      const {\r\n        user_id: userId,\r\n        access_token: accessToken,\r\n        refresh_token: refreshToken = null,\r\n        device_id: deviceId,\r\n      } = response as Record<string, unknown>;\r\n      if (typeof userId !== \"string\") {\r\n        throw new Error(\"Expected a user id in the response\");\r\n      }\r\n      if (typeof accessToken !== \"string\") {\r\n        throw new Error(\"Expected an access token in the response\");\r\n      }\r\n      if (typeof refreshToken !== \"string\" && refreshToken !== null) {\r\n        throw new Error(\"Expected refresh token to be a string or null\");\r\n      }\r\n      if (typeof deviceId !== \"string\") {\r\n        throw new Error(\"Expected device id to be a string\");\r\n      }\r\n      return { userId, accessToken, refreshToken, deviceId };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param credentials Credentials to use when logging in.\r\n   * @param link Should the request link with the current user?\r\n   * @param extraQueryParams Any extra parameters to include in the query string\r\n   * @returns A promise resolving to the url to be used when logging in.\r\n   */\r\n  private async getLogInUrl(credentials: Realm.Credentials, link = false, extraQueryParams: Partial<QueryParams> = {}) {\r\n    // See https://github.com/mongodb/stitch-js-sdk/blob/310f0bd5af80f818cdfbc3caf1ae29ffa8e9c7cf/packages/core/sdk/src/auth/internal/CoreStitchAuth.ts#L746-L780\r\n    const appRoute = this.fetcher.appRoute;\r\n    const loginRoute = appRoute.authProvider(credentials.providerName).login();\r\n    const qs = encodeQueryString({\r\n      link: link ? \"true\" : undefined,\r\n      ...extraQueryParams,\r\n    });\r\n    const locationUrl = await this.fetcher.locationUrl;\r\n    return locationUrl + loginRoute.path + qs;\r\n  }\r\n\r\n  private async openWindowAndWaitForAuthResponse(redirectUrl: string, state: string): Promise<AuthResponse> {\r\n    const redirectResult = await this.oauth2.openWindowAndWaitForRedirect(redirectUrl, state);\r\n    // Decode the auth info (id, tokens, etc.) from the result of the redirect\r\n    return OAuth2Helper.decodeAuthInfo(redirectResult.userAuth) as AuthResponse;\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { RequestInit, Response } from \"@realm/fetch\";\r\n\r\n// TODO: Determine if the shape of an error response is specific to each service or widely used.\r\n\r\n/**\r\n * An error produced while communicating with the MongoDB Realm server.\r\n */\r\nexport class MongoDBRealmError extends Error {\r\n  /**\r\n   * The method used when requesting.\r\n   */\r\n  public readonly method: string;\r\n  /**\r\n   * The URL of the resource which got fetched.\r\n   */\r\n  public readonly url: string;\r\n  /**\r\n   * The HTTP status code of the response.\r\n   */\r\n  public readonly statusCode: number;\r\n  /**\r\n   * A human readable version of the HTTP status.\r\n   */\r\n  public readonly statusText: string;\r\n  /**\r\n   * Any application-level error message.\r\n   */\r\n  public readonly error: string | undefined;\r\n  /**\r\n   * Any application-level error code.\r\n   */\r\n  public readonly errorCode: string | undefined;\r\n  /**\r\n   * Any application-level (URL) link containing details about the error.\r\n   */\r\n  public readonly link: string | undefined;\r\n\r\n  /**\r\n   * Constructs and returns an error from a request and a response.\r\n   * Note: The caller must throw this error themselves.\r\n   * @param url The url of the requested resource.\r\n   * @param request The request sent to the server.\r\n   * @param response A raw response, as returned from the server.\r\n   * @returns An error from a request and a response.\r\n   */\r\n  public static async fromRequestAndResponse(\r\n    url: string,\r\n    request: RequestInit<unknown>,\r\n    response: Response,\r\n  ): Promise<MongoDBRealmError> {\r\n    const { method = \"unknown\" } = request;\r\n    const { status, statusText } = response;\r\n    if (response.headers.get(\"content-type\")?.startsWith(\"application/json\")) {\r\n      const body = await response.json();\r\n      if (typeof body === \"object\" && body) {\r\n        const { error, error_code: errorCode, link } = body as SimpleObject;\r\n        return new MongoDBRealmError(\r\n          method,\r\n          url,\r\n          status,\r\n          statusText,\r\n          typeof error === \"string\" ? error : undefined,\r\n          typeof errorCode === \"string\" ? errorCode : undefined,\r\n          typeof link === \"string\" ? link : undefined,\r\n        );\r\n      }\r\n    }\r\n    return new MongoDBRealmError(method, url, status, statusText);\r\n  }\r\n\r\n  constructor(\r\n    method: string,\r\n    url: string,\r\n    statusCode: number,\r\n    statusText: string,\r\n    error?: string,\r\n    errorCode?: string,\r\n    link?: string,\r\n  ) {\r\n    const summary = statusText ? `status ${statusCode} ${statusText}` : `status ${statusCode}`;\r\n    if (typeof error === \"string\") {\r\n      super(`Request failed (${method} ${url}): ${error} (${summary})`);\r\n    } else {\r\n      super(`Request failed (${method} ${url}): (${summary})`);\r\n    }\r\n    this.method = method;\r\n    this.url = url;\r\n    this.statusText = statusText;\r\n    this.statusCode = statusCode;\r\n    this.error = error;\r\n    this.errorCode = errorCode;\r\n    this.link = link;\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { fetch, RequestInit, Response } from \"@realm/fetch\";\r\n\r\nimport { MongoDBRealmError } from \"./MongoDBRealmError\";\r\n\r\nimport { User } from \"./User\";\r\nimport routes from \"./routes\";\r\nimport { deserialize, serialize } from \"./utils/ejson\";\r\n\r\n/**\r\n * Some fetch function\r\n */\r\nexport type FetchFunction = typeof fetch<unknown>;\r\n\r\ntype SimpleObject = Record<string, unknown>;\r\n\r\n/**\r\n * @param response A possible response.\r\n * @param response.body A possible response body.\r\n * @returns An async iterator.\r\n */\r\nfunction asyncIteratorFromResponseBody({ body }: Response): AsyncIterable<Uint8Array> {\r\n  if (typeof body !== \"object\" || body === null) {\r\n    throw new Error(\"Expected a non-null object\");\r\n  }\r\n  // else if (Symbol.asyncIterator in body) {\r\n  //   return body as AsyncIterable<Uint8Array>;\r\n  // }\r\n   else if (\"getReader\" in body) {\r\n    return {\r\n      [Symbol.asyncIterator]() {\r\n        const reader = body.getReader();\r\n        return {\r\n          async next() {\r\n            const { done, value } = await reader.read();\r\n            if (done) {\r\n              // TODO: Simply return the result once https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1676 is merged and released\r\n              return { done, value: undefined };\r\n            } else if (value instanceof Uint8Array) {\r\n              return { done, value };\r\n            } else {\r\n              throw new Error(\"Expected value to be Uint8Array\");\r\n            }\r\n          },\r\n          async return() {\r\n            await reader.cancel();\r\n            return { done: true, value: null };\r\n          },\r\n        };\r\n      },\r\n    };\r\n  } else {\r\n    throw new Error(\"Expected an AsyncIterable or a ReadableStream\");\r\n  }\r\n}\r\n\r\n/**\r\n * Used to control which user is currently active - this would most likely be the {App} instance.\r\n */\r\nexport type UserContext = {\r\n  /**\r\n   * The currently active user.\r\n   */\r\n  currentUser: User | null;\r\n};\r\n\r\n/**\r\n * Used when getting the location url of the app.\r\n */\r\nexport type LocationUrlContext = {\r\n  /** The location URL of the app, used instead of the base url. */\r\n  locationUrl: Promise<string>;\r\n};\r\n\r\ntype TokenType = \"access\" | \"refresh\" | \"none\";\r\n\r\ninterface RequestWithUrl<RequestBody> extends RequestInit<RequestBody> {\r\n  path?: never;\r\n  url: string;\r\n}\r\n\r\ninterface RequestWithPath<RequestBody> extends Omit<RequestInit<RequestBody>, \"url\"> {\r\n  /** Construct a URL from the location URL prepended is path */\r\n  path: string;\r\n  url?: never;\r\n}\r\n\r\n/**\r\n * A request which will send the access or refresh token of the current user.\r\n */\r\nexport type AuthenticatedRequest<RequestBody = unknown> = {\r\n  /**\r\n   * Which token should be used when requesting?\r\n   * @default \"access\"\r\n   */\r\n  tokenType?: TokenType;\r\n  /**\r\n   * The user issuing the request.\r\n   */\r\n  user?: User;\r\n} & (RequestWithUrl<RequestBody> | RequestWithPath<RequestBody>);\r\n\r\n/**\r\n *\r\n */\r\nexport type FetcherConfig = {\r\n  /**\r\n   * The id of the app.\r\n   */\r\n  appId: string;\r\n  /**\r\n   * The underlying fetch function.\r\n   */\r\n  fetch: FetchFunction;\r\n  /**\r\n   * An object which can be used to determine the currently active user.\r\n   */\r\n  userContext: UserContext;\r\n  /**\r\n   * An optional promise which resolves to the response of the app location request.\r\n   */\r\n  locationUrlContext: LocationUrlContext;\r\n};\r\n\r\n/**\r\n * Wraps the fetch from the \"@realm/fetch\" package.\r\n * Extracts error messages and throws `MongoDBRealmError` objects upon failures.\r\n * Injects access or refresh tokens for a current or specific user.\r\n * Refreshes access tokens if requests fails due to a 401 error.\r\n * Optionally parses response as JSON before returning it.\r\n * Fetches and exposes an app's location url.\r\n */\r\nexport class Fetcher implements LocationUrlContext {\r\n  /**\r\n   * @param user An optional user to generate the header for.\r\n   * @param tokenType The type of token (access or refresh).\r\n   * @returns An object containing the user's token as \"Authorization\" header or undefined if no user is given.\r\n   */\r\n  private static buildAuthorizationHeader(user: User | null, tokenType: TokenType): Record<string, string> {\r\n    if (!user || tokenType === \"none\") {\r\n      return {};\r\n    } else if (tokenType === \"access\") {\r\n      return { Authorization: `Bearer ${user.accessToken}` };\r\n    } else if (tokenType === \"refresh\") {\r\n      return { Authorization: `Bearer ${user.refreshToken}` };\r\n    } else {\r\n      throw new Error(`Unexpected token type (${tokenType})`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param body The body string or object passed from a request.\r\n   * @returns An object optionally specifying the \"Content-Type\" header.\r\n   */\r\n  private static buildBody(body: unknown): string | undefined {\r\n    if (!body) {\r\n      return;\r\n    } else if (typeof body === \"object\" && body !== null) {\r\n      return JSON.stringify(serialize(body as SimpleObject));\r\n    } else if (typeof body === \"string\") {\r\n      return body;\r\n    } else {\r\n      console.log(\"body is\", body);\r\n      throw new Error(\"Unexpected type of body\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param body The body string or object passed from a request.\r\n   * @returns An object optionally specifying the \"Content-Type\" header.\r\n   */\r\n  private static buildJsonHeader(body: string | undefined): Record<string, string> {\r\n    if (body && body.length > 0) {\r\n      return { \"Content-Type\": \"application/json\" };\r\n    } else {\r\n      return {};\r\n    }\r\n  }\r\n\r\n  private readonly config: FetcherConfig;\r\n\r\n  /**\r\n   * @param config A configuration of the fetcher.\r\n   * @param config.appId The application id.\r\n   * @param config.fetch The fetch function used when fetching.\r\n   * @param config.userContext An object used to determine the requesting user.\r\n   * @param config.locationUrlContext An object used to determine the location / base URL.\r\n   */\r\n  constructor(config: FetcherConfig) {\r\n    this.config = config;\r\n  }\r\n\r\n  clone(config: Partial<FetcherConfig>): Fetcher {\r\n    return new Fetcher({\r\n      ...this.config,\r\n      ...config,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch a network resource as an authenticated user.\r\n   * @param request The request which should be sent to the server.\r\n   * @returns The response from the server.\r\n   */\r\n  public async fetch<RequestBody = unknown>(request: AuthenticatedRequest<RequestBody>): Promise<Response> {\r\n    const { path, url, tokenType = \"access\", user = this.config.userContext.currentUser, ...restOfRequest } = request;\r\n\r\n    if (typeof path === \"string\" && typeof url === \"string\") {\r\n      throw new Error(\"Use of 'url' and 'path' mutually exclusive\");\r\n    } else if (typeof path === \"string\") {\r\n      // Derive the URL\r\n      const url = (await this.config.locationUrlContext.locationUrl) + path;\r\n      return this.fetch({ ...request, path: undefined, url });\r\n    } else if (typeof url === \"string\") {\r\n      const response = await this.config.fetch(url, {\r\n        ...restOfRequest,\r\n        headers: {\r\n          ...Fetcher.buildAuthorizationHeader(user, tokenType),\r\n          ...request.headers,\r\n        },\r\n      });\r\n\r\n      if (response.ok) {\r\n        return response;\r\n      } else {\r\n        const error = await MongoDBRealmError.fromRequestAndResponse(url, request, response);\r\n        if (\r\n          user &&\r\n          response.status === 401 &&\r\n          (error.errorCode === \"InvalidSession\" || // Expired token\r\n            error.error === \"unauthorized\") // Entirely invalid signature\r\n        ) {\r\n          if (tokenType === \"access\") {\r\n            // If the access token has expired, it would help refreshing it\r\n            await user.refreshAccessToken();\r\n            // Retry with the specific user, since the currentUser might have changed.\r\n            return this.fetch({ ...request, user });\r\n          } else if (tokenType === \"refresh\") {\r\n            // A 401 error while using the refresh token indicates the token has an issue.\r\n            // Reset the tokens to prevent a lock.\r\n            user.accessToken = null;\r\n            user.refreshToken = null;\r\n          }\r\n        }\r\n        // Throw an error with a message extracted from the body\r\n        throw error;\r\n      }\r\n    } else {\r\n      throw new Error(\"Expected either 'url' or 'path'\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch a network resource as an authenticated user and parse the result as extended JSON.\r\n   * @param request The request which should be sent to the server.\r\n   * @returns The response from the server, parsed as extended JSON.\r\n   */\r\n  public async fetchJSON<RequestBody = unknown, ResponseBody = unknown>(\r\n    request: AuthenticatedRequest<RequestBody>,\r\n  ): Promise<ResponseBody> {\r\n    const { body } = request;\r\n    const serializedBody = Fetcher.buildBody(body);\r\n    const contentTypeHeaders = Fetcher.buildJsonHeader(serializedBody);\r\n    const response = await this.fetch({\r\n      ...request,\r\n      body: serializedBody,\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        ...contentTypeHeaders,\r\n        ...request.headers,\r\n      },\r\n    });\r\n    const contentType = response.headers.get(\"content-type\");\r\n    if (contentType?.startsWith(\"application/json\")) {\r\n      const responseBody = await response.json();\r\n      return deserialize(responseBody as SimpleObject) as ResponseBody;\r\n    } else if (contentType === null) {\r\n      return null as unknown as ResponseBody;\r\n    } else {\r\n      throw new Error(`Expected JSON response, got \"${contentType}\"`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch an \"event-stream\" resource as an authenticated user.\r\n   * @param request The request which should be sent to the server.\r\n   * @returns An async iterator over the response body.\r\n   */\r\n  public async fetchStream<RequestBody = unknown>(\r\n    request: AuthenticatedRequest<RequestBody>,\r\n  ): Promise<AsyncIterable<Uint8Array>> {\r\n    const response = await this.fetch({\r\n      ...request,\r\n      headers: {\r\n        Accept: \"text/event-stream\",\r\n        ...request.headers,\r\n      },\r\n    });\r\n    return asyncIteratorFromResponseBody(response);\r\n  }\r\n\r\n  /**\r\n   * @returns The path of the app route.\r\n   */\r\n  public get appRoute() {\r\n    return routes.api().app(this.config.appId);\r\n  }\r\n\r\n  /**\r\n   * @returns A promise of the location URL of the app.\r\n   */\r\n  public get locationUrl(): Promise<string> {\r\n    return this.config.locationUrlContext.locationUrl;\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { ObjectId } from \"bson\";\r\nimport { Base64 } from \"js-base64\";\r\n\r\nimport { getEnvironment } from \"./environment\";\r\nimport { removeKeysWithUndefinedValues } from \"./utils/objects\";\r\n\r\n/**\r\n * The key in a storage on which the device id is stored.\r\n */\r\nexport const DEVICE_ID_STORAGE_KEY = \"deviceId\";\r\n\r\n/** Provided by Rollup */\r\ndeclare const __SDK_VERSION__: string;\r\n\r\nenum DeviceFields {\r\n  DEVICE_ID = \"deviceId\",\r\n  APP_ID = \"appId\",\r\n  APP_VERSION = \"appVersion\",\r\n  PLATFORM = \"platform\",\r\n  PLATFORM_VERSION = \"platformVersion\",\r\n  SDK_VERSION = \"sdkVersion\",\r\n}\r\n\r\ntype DeviceInformationValues = {\r\n  [DeviceFields.PLATFORM]: string;\r\n  [DeviceFields.PLATFORM_VERSION]: string;\r\n  [DeviceFields.SDK_VERSION]: string;\r\n  [DeviceFields.APP_ID]?: string;\r\n  [DeviceFields.APP_VERSION]?: string;\r\n  [DeviceFields.DEVICE_ID]?: ObjectId;\r\n};\r\n\r\ntype DeviceInformationParams = {\r\n  appId?: string;\r\n  appVersion?: string;\r\n  deviceId?: ObjectId;\r\n};\r\n\r\n/**\r\n * Information describing the device, app and SDK.\r\n */\r\nexport class DeviceInformation implements DeviceInformationValues {\r\n  /**\r\n   * The id of the device.\r\n   */\r\n  public readonly deviceId: ObjectId | undefined;\r\n\r\n  /**\r\n   * The id of the Realm App.\r\n   */\r\n  public readonly appId: string | undefined;\r\n\r\n  /**\r\n   * The version of the Realm App.\r\n   */\r\n  public readonly appVersion: string | undefined;\r\n\r\n  /**\r\n   * The name of the platform / browser.\r\n   */\r\n  public readonly platform: string;\r\n\r\n  /**\r\n   * The version of the platform / browser.\r\n   */\r\n  public readonly platformVersion: string;\r\n\r\n  /**\r\n   * The version of the Realm Web SDK (constant provided by Rollup).\r\n   */\r\n  public readonly sdkVersion: string = __SDK_VERSION__;\r\n\r\n  /**\r\n   * @param params Construct the device information from these parameters.\r\n   * @param params.appId A user-defined application id.\r\n   * @param params.appVersion A user-defined application version.\r\n   * @param params.deviceId An unique id for the end-users device.\r\n   */\r\n  public constructor({ appId, appVersion, deviceId }: DeviceInformationParams) {\r\n    const environment = getEnvironment();\r\n    this.platform = environment.platform;\r\n    this.platformVersion = environment.platformVersion;\r\n    this.appId = appId;\r\n    this.appVersion = appVersion;\r\n    this.deviceId = deviceId;\r\n  }\r\n\r\n  /**\r\n   * @returns An base64 URI encoded representation of the device information.\r\n   */\r\n  public encode(): string {\r\n    const obj = removeKeysWithUndefinedValues(this as Record<string, unknown>);\r\n    return Base64.encode(JSON.stringify(obj));\r\n  }\r\n\r\n  /**\r\n   * @returns The defaults\r\n   */\r\n  public toJSON(): Record<string, unknown> {\r\n    return removeKeysWithUndefinedValues(this as Record<string, unknown>);\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nimport { fetch } from \"@realm/fetch\";\r\nimport { ObjectId } from \"bson\";\r\n\r\nimport { User, UserState } from \"./User\";\r\nimport { Credentials, ProviderType } from \"./Credentials\";\r\nimport { EmailPasswordAuth } from \"./auth-providers\";\r\nimport { Storage } from \"./storage\";\r\nimport { AppStorage } from \"./AppStorage\";\r\nimport { getEnvironment } from \"./environment\";\r\nimport { AuthResponse, Authenticator } from \"./Authenticator\";\r\nimport { FetchFunction, Fetcher, UserContext } from \"./Fetcher\";\r\nimport routes from \"./routes\";\r\nimport { DeviceInformation, DEVICE_ID_STORAGE_KEY } from \"./DeviceInformation\";\r\n\r\ntype SimpleObject = Record<string, unknown>;\r\n\r\n/**\r\n * Default base url to prefix all requests if no baseUrl is specified in the configuration.\r\n */\r\nexport const DEFAULT_BASE_URL = \"https://services.cloud.mongodb.com\";\r\n\r\n/**\r\n * Configuration to pass as an argument when constructing an app.\r\n */\r\nexport interface AppConfiguration extends Realm.AppConfiguration {\r\n  /**\r\n   * Transport to use when fetching resources.\r\n   */\r\n  fetch?: FetchFunction;\r\n  /**\r\n   * Used when persisting app state, such as tokens of authenticated users.\r\n   */\r\n  storage?: Storage;\r\n  /**\r\n   * Skips requesting a location URL via the baseUrl and use the `baseUrl` as the url prefixed for any requests initiated by this app.\r\n   * This can useful when connecting to a server through a reverse proxy, to avoid the location request to make the client \"break out\" and start requesting another server.\r\n   */\r\n  skipLocationRequest?: boolean;\r\n}\r\n\r\n/**\r\n * Atlas App Services Application\r\n */\r\nexport class App<\r\n  FunctionsFactoryType = Realm.DefaultFunctionsFactory & Realm.BaseFunctionsFactory,\r\n  CustomDataType = SimpleObject,\r\n> implements Realm.App<FunctionsFactoryType, CustomDataType>\r\n{\r\n  /**\r\n   * A map of app instances returned from calling getApp.\r\n   */\r\n  private static appCache: { [id: string]: App } = {};\r\n\r\n  /**\r\n   * Get or create a singleton Realm App from an id.\r\n   * Calling this function multiple times with the same id will return the same instance.\r\n   * @param id The Realm App id visible from the Atlas App Services UI or a configuration.\r\n   * @returns The Realm App instance.\r\n   */\r\n  static getApp(id: string): App {\r\n    if (id in App.appCache) {\r\n      return App.appCache[id];\r\n    } else {\r\n      const instance = new App(id);\r\n      App.appCache[id] = instance;\r\n      return instance;\r\n    }\r\n  }\r\n\r\n  /** @inheritdoc */\r\n  public readonly id: string;\r\n\r\n  /**\r\n   * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.\r\n   */\r\n  public static readonly Credentials = Credentials;\r\n\r\n  /**\r\n   * An object which can be used to fetch responses from the server.\r\n   */\r\n  public readonly fetcher: Fetcher;\r\n\r\n  /** @inheritdoc */\r\n  public readonly emailPasswordAuth: EmailPasswordAuth;\r\n\r\n  /**\r\n   * Storage available for the app.\r\n   */\r\n  public readonly storage: AppStorage;\r\n\r\n  /**\r\n   * Internal authenticator used to complete authentication requests.\r\n   */\r\n  public readonly authenticator: Authenticator;\r\n\r\n  /**\r\n   * An array of active and logged-out users.\r\n   * Elements in the beginning of the array is considered more recent than the later elements.\r\n   */\r\n  private users: User<FunctionsFactoryType, CustomDataType>[] = [];\r\n\r\n  /**\r\n   * The base URL of the app.\r\n   */\r\n  private readonly baseUrl: string;\r\n\r\n  /**\r\n   * Local app configuration.\r\n   * Useful to determine what name and version an authenticated user is running.\r\n   */\r\n  private readonly localApp: Realm.LocalAppConfiguration | undefined;\r\n\r\n  /**\r\n   * A promise resolving to the App's location url.\r\n   */\r\n  private _locationUrl: Promise<string> | null = null;\r\n\r\n  /**\r\n   * Construct a Realm App, either from the Realm App id visible from the Atlas App Services UI or a configuration.\r\n   * @param idOrConfiguration The Realm App id or a configuration to use for this app.\r\n   */\r\n  constructor(idOrConfiguration: string | AppConfiguration) {\r\n    // If the argument is a string, convert it to a simple configuration object.\r\n    const configuration = typeof idOrConfiguration === \"string\" ? { id: idOrConfiguration } : idOrConfiguration;\r\n    // Initialize properties from the configuration\r\n    if (typeof configuration === \"object\" && typeof configuration.id === \"string\") {\r\n      this.id = configuration.id;\r\n    } else {\r\n      throw new Error(\"Missing an Atlas App Services app-id\");\r\n    }\r\n    this.baseUrl = configuration.baseUrl || DEFAULT_BASE_URL;\r\n    if (configuration.skipLocationRequest) {\r\n      // Use the base url directly, instead of requesting a location URL from the server\r\n      this._locationUrl = Promise.resolve(this.baseUrl);\r\n    }\r\n    this.localApp = configuration.app;\r\n    // Construct a fetcher wrapping the network transport\r\n    this.fetcher = new Fetcher({\r\n      appId: this.id,\r\n      userContext: this as UserContext,\r\n      locationUrlContext: this,\r\n      fetch: configuration.fetch ?? fetch,\r\n    });\r\n    // Construct the auth providers\r\n    this.emailPasswordAuth = new EmailPasswordAuth(this.fetcher);\r\n    // Construct the storage\r\n    const baseStorage = configuration.storage || getEnvironment().defaultStorage;\r\n    this.storage = new AppStorage(baseStorage, this.id);\r\n    this.authenticator = new Authenticator(this.fetcher, baseStorage, () => this.deviceInformation);\r\n    // Hydrate the app state from storage\r\n    try {\r\n      this.hydrate();\r\n    } catch (err) {\r\n      // The storage was corrupted\r\n      this.storage.clear();\r\n      // A failed hydration shouldn't throw and break the app experience\r\n      // Since this is \"just\" persisted state that unfortunately got corrupted or partially lost\r\n      console.warn(\"Realm app hydration failed:\", err instanceof Error ? err.message : err);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Switch user.\r\n   * @param nextUser The user or id of the user to switch to.\r\n   */\r\n  public switchUser(nextUser: User<FunctionsFactoryType, CustomDataType>): void {\r\n    const index = this.users.findIndex((u) => u === nextUser);\r\n    if (index === -1) {\r\n      throw new Error(\"The user was never logged into this app\");\r\n    }\r\n    // Remove the user from the stack\r\n    const [user] = this.users.splice(index, 1);\r\n    // Insert the user in the beginning of the stack\r\n    this.users.unshift(user);\r\n  }\r\n\r\n  /**\r\n   * Log in a user.\r\n   * @param credentials Credentials to use when logging in.\r\n   * @param fetchProfile Should the users profile be fetched? (default: true)\r\n   * @returns A promise resolving to the newly logged in user.\r\n   */\r\n  public async logIn(\r\n    credentials: Credentials,\r\n    fetchProfile = true,\r\n  ): Promise<User<FunctionsFactoryType, CustomDataType>> {\r\n    if (credentials.reuse) {\r\n      // TODO: Consider exposing providerName on \"User\" and match against that instead?\r\n      const existingUser = this.users.find((user) => user.providerType === credentials.providerType);\r\n      if (existingUser) {\r\n        this.switchUser(existingUser);\r\n        // If needed, fetch and set the profile on the user\r\n        if (fetchProfile) {\r\n          await existingUser.refreshProfile();\r\n        }\r\n        return existingUser;\r\n      }\r\n    }\r\n    const response = await this.authenticator.authenticate(credentials);\r\n    const user = this.createOrUpdateUser(response, credentials.providerType);\r\n    // Let's ensure this will be the current user, in case the user object was reused.\r\n    this.switchUser(user);\r\n    // If needed, fetch and set the profile on the user\r\n    if (fetchProfile) {\r\n      await user.refreshProfile();\r\n    }\r\n    // Persist the user id in the storage,\r\n    // merging to avoid overriding logins from other apps using the same underlying storage\r\n    this.storage.setUserIds(\r\n      this.users.map((u) => u.id),\r\n      true,\r\n    );\r\n    // Read out and store the device id from the server\r\n    const deviceId = response.deviceId;\r\n    if (deviceId && deviceId !== \"000000000000000000000000\") {\r\n      this.storage.set(DEVICE_ID_STORAGE_KEY, deviceId);\r\n    }\r\n    // Return the user\r\n    return user;\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc\r\n   */\r\n  public async removeUser(user: User<FunctionsFactoryType, CustomDataType>): Promise<void> {\r\n    // Remove the user from the list of users\r\n    const index = this.users.findIndex((u) => u === user);\r\n    if (index === -1) {\r\n      throw new Error(\"The user was never logged into this app\");\r\n    }\r\n    this.users.splice(index, 1);\r\n    // Log out the user - this removes access and refresh tokens from storage\r\n    await user.logOut();\r\n    // Remove the users profile from storage\r\n    this.storage.remove(`user(${user.id}):profile`);\r\n    // Remove the user from the storage\r\n    this.storage.removeUserId(user.id);\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc\r\n   */\r\n  public async deleteUser(user: User<FunctionsFactoryType, CustomDataType>): Promise<void> {\r\n    await this.fetcher.fetchJSON({\r\n      method: \"DELETE\",\r\n      path: routes.api().auth().delete().path,\r\n    });\r\n    await this.removeUser(user);\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc\r\n   */\r\n  public addListener(): void {\r\n    throw new Error(\"Not yet implemented\");\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc\r\n   */\r\n  public removeListener(): void {\r\n    throw new Error(\"Not yet implemented\");\r\n  }\r\n\r\n  /**\r\n   * @inheritdoc\r\n   */\r\n  public removeAllListeners(): void {\r\n    throw new Error(\"Not yet implemented\");\r\n  }\r\n\r\n  /**\r\n   * The currently active user (or null if no active users exists).\r\n   * @returns the currently active user or null.\r\n   */\r\n  public get currentUser(): User<FunctionsFactoryType, CustomDataType> | null {\r\n    const activeUsers = this.users.filter((user) => user.state === UserState.Active);\r\n    if (activeUsers.length === 0) {\r\n      return null;\r\n    } else {\r\n      // Current user is the top of the stack\r\n      return activeUsers[0];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * All active and logged-out users:\r\n   * - First in the list are active users (ordered by most recent call to switchUser or login)\r\n   * - Followed by logged out users (also ordered by most recent call to switchUser or login).\r\n   * @returns An array of users active or logged out users (current user being the first).\r\n   */\r\n  public get allUsers(): Readonly<Record<string, User<FunctionsFactoryType, CustomDataType>>> {\r\n    // Returning a freezed copy of the list of users to prevent outside changes\r\n    return Object.fromEntries(this.users.map((user) => [user.id, user]));\r\n  }\r\n\r\n  /**\r\n   * @returns A promise of the app URL, with the app location resolved.\r\n   */\r\n  public get locationUrl(): Promise<string> {\r\n    if (!this._locationUrl) {\r\n      const path = routes.api().app(this.id).location().path;\r\n      this._locationUrl = this.fetcher\r\n        .fetchJSON({\r\n          method: \"GET\",\r\n          url: this.baseUrl + path,\r\n          tokenType: \"none\",\r\n        })\r\n        .then((body) => {\r\n          if (typeof body !== \"object\") {\r\n            throw new Error(\"Expected response body be an object\");\r\n          } else {\r\n            return body as Record<string, unknown>;\r\n          }\r\n        })\r\n        .then(({ hostname }) => {\r\n          if (typeof hostname !== \"string\") {\r\n            throw new Error(\"Expected response to contain a 'hostname'\");\r\n          } else {\r\n            return hostname;\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          // Reset the location to allow another request to fetch again.\r\n          this._locationUrl = null;\r\n          throw err;\r\n        });\r\n    }\r\n    return this._locationUrl;\r\n  }\r\n\r\n  /**\r\n   * @returns Information about the current device, sent to the server when authenticating.\r\n   */\r\n  public get deviceInformation(): DeviceInformation {\r\n    const deviceIdStr = this.storage.getDeviceId();\r\n    const deviceId =\r\n      typeof deviceIdStr === \"string\" && deviceIdStr !== \"000000000000000000000000\"\r\n        ? new ObjectId(deviceIdStr)\r\n        : undefined;\r\n    return new DeviceInformation({\r\n      appId: this.localApp ? this.localApp.name : undefined,\r\n      appVersion: this.localApp ? this.localApp.version : undefined,\r\n      deviceId,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create (and store) a new user or update an existing user's access and refresh tokens.\r\n   * This helps de-duplicating users in the list of users known to the app.\r\n   * @param response A response from the Authenticator.\r\n   * @param providerType The type of the authentication provider used.\r\n   * @returns A new or an existing user.\r\n   */\r\n  private createOrUpdateUser(\r\n    response: AuthResponse,\r\n    providerType: ProviderType,\r\n  ): User<FunctionsFactoryType, CustomDataType> {\r\n    const existingUser = this.users.find((u) => u.id === response.userId);\r\n    if (existingUser) {\r\n      // Update the users access and refresh tokens\r\n      existingUser.accessToken = response.accessToken;\r\n      existingUser.refreshToken = response.refreshToken;\r\n      return existingUser;\r\n    } else {\r\n      // Create and store a new user\r\n      if (!response.refreshToken) {\r\n        throw new Error(\"No refresh token in response from server\");\r\n      }\r\n      const user = new User<FunctionsFactoryType, CustomDataType>({\r\n        app: this,\r\n        id: response.userId,\r\n        accessToken: response.accessToken,\r\n        refreshToken: response.refreshToken,\r\n        providerType,\r\n      });\r\n      this.users.unshift(user);\r\n      return user;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restores the state of the app (active and logged-out users) from the storage\r\n   */\r\n  private hydrate() {\r\n    const userIds = this.storage.getUserIds();\r\n    this.users = userIds.map((id) => new User<FunctionsFactoryType, CustomDataType>({ app: this, id }));\r\n  }\r\n}\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\nexport * as BSON from \"bson\";\r\n\r\nimport { App } from \"./App\";\r\n\r\n/**\r\n * Get or create a singleton Realm App from an id.\r\n * Calling this function multiple times with the same id will return the same instance.\r\n * @param id The Realm App id visible from the Atlas App Services UI or a configuration.\r\n * @returns The Realm App instance.\r\n */\r\nexport function getApp(id: string): App {\r\n  return App.getApp(id);\r\n}\r\n\r\nexport * from \"./App\";\r\nexport * from \"./Credentials\";\r\nexport * from \"./User\";\r\nexport { MongoDBRealmError } from \"./MongoDBRealmError\";\r\nexport { getEnvironment, setEnvironment } from \"./environment\";\r\n","////////////////////////////////////////////////////////////////////////////\r\n//\r\n// Copyright 2020 Realm Inc.\r\n//\r\n// Licensed under the Apache License, Version 2.0 (the \"License\");\r\n// you may not use this file except in compliance with the License.\r\n// You may obtain a copy of the License at\r\n//\r\n// http://www.apache.org/licenses/LICENSE-2.0\r\n//\r\n// Unless required by applicable law or agreed to in writing, software\r\n// distributed under the License is distributed on an \"AS IS\" BASIS,\r\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n// See the License for the specific language governing permissions and\r\n// limitations under the License.\r\n//\r\n////////////////////////////////////////////////////////////////////////////\r\n\r\ndeclare global {\r\n  type TimerHandle = ReturnType<typeof setTimeout>;\r\n}\r\n\r\nimport { setEnvironment, Environment } from \"../environment\";\r\nimport { MemoryStorage } from \"../storage\";\r\nimport { TextDecoder } from \"util\";\r\n\r\nconst environment: Environment = {\r\n  defaultStorage: new MemoryStorage(),\r\n  openWindow: (url) => {\r\n    console.log(`Please open this URL: ${url}`);\r\n    return null;\r\n  },\r\n\r\n  platform: process.release.name || \"node\",\r\n  platformVersion: process.versions.node,\r\n\r\n  TextDecoder,\r\n};\r\n\r\nsetEnvironment(environment);\r\n\r\n/**\r\n * Handle an OAuth 2.0 redirect.\r\n */\r\nexport function handleAuthRedirect(): void {\r\n  throw new Error(\"Handling OAuth 2.0 redirects is not supported outside a browser\");\r\n}\r\n\r\n// Export here to avoid getting the enviroment before its been sat (since this will be translated to commonjs)\r\nexport * from \"../index\";\r\n"],"names":["environment","UserType","Base64","createMongoDBRemoteService","DEVICE_ID_STORAGE_KEY","TextDecoder"],"mappings":"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","x_google_ignoreList":[4]}